
Car-Project-Static-Architecture-.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  0000045a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f51  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c7  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f2c  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00002d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000812  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001648  00000000  00000000  00003842  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004e8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_1>
   8:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_2>
   c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Atmega32Registers.h"
#include "Timer.h"

int main()
{
	OCR1A=127;
  92:	8f e7       	ldi	r24, 0x7F	; 127
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
	TCCR1A=0b00000000U;
  9a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0b00001101;
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	8e bd       	out	0x2e, r24	; 46
	SREG=1<<7;
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	8f bf       	out	0x3f, r24	; 63
	DDRD|=1<<5;
  a4:	8d 9a       	sbi	0x11, 5	; 17
	TIMSK=1<<OCIE1A;
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	89 bf       	out	0x39, r24	; 57
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x18>

000000ac <__vector_7>:
}



Timer_ISR(TIMER1_COMPA_VECTOR)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25

	static uinteg8_t u8_state=0;
	switch(u8_state)
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  be:	88 23       	and	r24, r24
  c0:	99 f0       	breq	.+38     	; 0xe8 <__vector_7+0x3c>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	51 f4       	brne	.+20     	; 0xda <__vector_7+0x2e>
		}
		break;
		case 1 :
		{
			
			OCR1A=128;
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9b bd       	out	0x2b, r25	; 43
  cc:	8a bd       	out	0x2a, r24	; 42
			PORTD^=(1<<5);
  ce:	92 b3       	in	r25, 0x12	; 18
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	89 27       	eor	r24, r25
  d4:	82 bb       	out	0x12, r24	; 18
			u8_state=0;
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
		}
		break;
	}

}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti
	static uinteg8_t u8_state=0;
	switch(u8_state)
	{
		case 0:
		{
			OCR1A=127;
  e8:	8f e7       	ldi	r24, 0x7F	; 127
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9b bd       	out	0x2b, r25	; 43
  ee:	8a bd       	out	0x2a, r24	; 42
			PORTD^=(1<<5);
  f0:	92 b3       	in	r25, 0x12	; 18
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	89 27       	eor	r24, r25
  f6:	82 bb       	out	0x12, r24	; 18
			u8_state=1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
			u8_state=0;
		}
		break;
	}

}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_16>:
	 }
	 return sgADC_Error_ADC_READ_API; 
 }
 
ADC_ISR_CODE()
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	DIO_Init_Pin(26,1);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	8a e1       	ldi	r24, 0x1A	; 26
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_Init_Pin>
	DIO_toggle_Pin(26);
 13a:	8a e1       	ldi	r24, 0x1A	; 26
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 40 01 	call	0x280	; 0x280 <DIO_toggle_Pin>
	
	TIMER_CLR_INT_FLAG(TIMER1_B_COMP_FLAG);
 142:	88 e0       	ldi	r24, 0x08	; 8
 144:	88 bf       	out	0x38, r24	; 56
	
	if(NullPointer!=sgPntrToFun_ADC_ISR)
 146:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sgPntrToFun_ADC_ISR>
 14a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <sgPntrToFun_ADC_ISR+0x1>
 14e:	89 2b       	or	r24, r25
 150:	29 f0       	breq	.+10     	; 0x15c <__vector_16+0x50>
	{
			sgPntrToFun_ADC_ISR();
 152:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <sgPntrToFun_ADC_ISR>
 156:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <sgPntrToFun_ADC_ISR+0x1>
 15a:	09 95       	icall
	{
		/*Do Nothing*/
	}

	
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <DIO_Init_Pin>:
	switch(por)
	{
		case 'A':TOGGLE_PORT(WriteRegisterA);
			  break;
		case 'B':TOGGLE_PORT(WriteRegisterB);
		      break;
 17e:	80 32       	cpi	r24, 0x20	; 32
 180:	f0 f4       	brcc	.+60     	; 0x1be <DIO_Init_Pin+0x40>
 182:	98 2f       	mov	r25, r24
 184:	97 70       	andi	r25, 0x07	; 7
 186:	86 95       	lsr	r24
 188:	86 95       	lsr	r24
 18a:	86 95       	lsr	r24
 18c:	8f 5b       	subi	r24, 0xBF	; 191
 18e:	83 34       	cpi	r24, 0x43	; 67
 190:	c1 f0       	breq	.+48     	; 0x1c2 <DIO_Init_Pin+0x44>
 192:	84 34       	cpi	r24, 0x44	; 68
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_Init_Pin+0x1a>
 196:	42 c0       	rjmp	.+132    	; 0x21c <DIO_Init_Pin+0x9e>
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	79 f1       	breq	.+94     	; 0x1fa <DIO_Init_Pin+0x7c>
 19c:	4a b3       	in	r20, 0x1a	; 26
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	61 11       	cpse	r22, r1
 1a4:	1f c0       	rjmp	.+62     	; 0x1e4 <DIO_Init_Pin+0x66>
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_Init_Pin+0x30>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	9a 95       	dec	r25
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_Init_Pin+0x2c>
 1b2:	cb 01       	movw	r24, r22
 1b4:	80 95       	com	r24
 1b6:	84 23       	and	r24, r20
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
 1c2:	44 b3       	in	r20, 0x14	; 20
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	61 11       	cpse	r22, r1
 1ca:	38 c0       	rjmp	.+112    	; 0x23c <DIO_Init_Pin+0xbe>
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_Init_Pin+0x56>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	9a 95       	dec	r25
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_Init_Pin+0x52>
 1d8:	cb 01       	movw	r24, r22
 1da:	80 95       	com	r24
 1dc:	84 23       	and	r24, r20
 1de:	84 bb       	out	0x14, r24	; 20
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	b9 01       	movw	r22, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_Init_Pin+0x6e>
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	9a 95       	dec	r25
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_Init_Pin+0x6a>
 1f0:	cb 01       	movw	r24, r22
 1f2:	84 2b       	or	r24, r20
 1f4:	8a bb       	out	0x1a, r24	; 26
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
 1fa:	47 b3       	in	r20, 0x17	; 23
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	61 11       	cpse	r22, r1
 202:	27 c0       	rjmp	.+78     	; 0x252 <DIO_Init_Pin+0xd4>
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_Init_Pin+0x8e>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	9a 95       	dec	r25
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_Init_Pin+0x8a>
 210:	cb 01       	movw	r24, r22
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	87 bb       	out	0x17, r24	; 23
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
 21c:	41 b3       	in	r20, 0x11	; 17
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	66 23       	and	r22, r22
 224:	09 f1       	breq	.+66     	; 0x268 <DIO_Init_Pin+0xea>
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_Init_Pin+0xb0>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	9a 95       	dec	r25
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_Init_Pin+0xac>
 232:	cb 01       	movw	r24, r22
 234:	84 2b       	or	r24, r20
 236:	81 bb       	out	0x11, r24	; 17
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 95       	ret
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_Init_Pin+0xc6>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	9a 95       	dec	r25
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_Init_Pin+0xc2>
 248:	cb 01       	movw	r24, r22
 24a:	84 2b       	or	r24, r20
 24c:	84 bb       	out	0x14, r24	; 20
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_Init_Pin+0xdc>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	9a 95       	dec	r25
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_Init_Pin+0xd8>
 25e:	cb 01       	movw	r24, r22
 260:	84 2b       	or	r24, r20
 262:	87 bb       	out	0x17, r24	; 23
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_Init_Pin+0xf2>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	9a 95       	dec	r25
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_Init_Pin+0xee>
 274:	cb 01       	movw	r24, r22
 276:	80 95       	com	r24
 278:	84 23       	and	r24, r20
 27a:	81 bb       	out	0x11, r24	; 17
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	08 95       	ret

00000280 <DIO_toggle_Pin>:
return DIO_ERROR_OK;
}
uinteg8_t DIO_toggle_Pin(uinteg8_t pin)
{
	uinteg8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 280:	80 32       	cpi	r24, 0x20	; 32
 282:	b8 f4       	brcc	.+46     	; 0x2b2 <DIO_toggle_Pin+0x32>
	else
	{
		por='A'+pin/PortSize;
		pin=pin%PortSize;
 284:	28 2f       	mov	r18, r24
 286:	27 70       	andi	r18, 0x07	; 7
	}
	
	switch(por)
 288:	86 95       	lsr	r24
 28a:	86 95       	lsr	r24
 28c:	86 95       	lsr	r24
 28e:	8f 5b       	subi	r24, 0xBF	; 191
 290:	83 34       	cpi	r24, 0x43	; 67
 292:	89 f0       	breq	.+34     	; 0x2b6 <DIO_toggle_Pin+0x36>
 294:	84 34       	cpi	r24, 0x44	; 68
 296:	29 f1       	breq	.+74     	; 0x2e2 <DIO_toggle_Pin+0x62>
 298:	82 34       	cpi	r24, 0x42	; 66
 29a:	c1 f0       	breq	.+48     	; 0x2cc <DIO_toggle_Pin+0x4c>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
 29c:	3b b3       	in	r19, 0x1b	; 27
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <DIO_toggle_Pin+0x26>
 2a4:	88 0f       	add	r24, r24
 2a6:	2a 95       	dec	r18
 2a8:	ea f7       	brpl	.-6      	; 0x2a4 <DIO_toggle_Pin+0x24>
 2aa:	83 27       	eor	r24, r19
 2ac:	8b bb       	out	0x1b, r24	; 27
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
 2b0:	08 95       	ret
return DIO_ERROR_OK;
}
uinteg8_t DIO_toggle_Pin(uinteg8_t pin)
{
	uinteg8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
}
 2b4:	08 95       	ret
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
 2b6:	35 b3       	in	r19, 0x15	; 21
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <DIO_toggle_Pin+0x40>
 2be:	88 0f       	add	r24, r24
 2c0:	2a 95       	dec	r18
 2c2:	ea f7       	brpl	.-6      	; 0x2be <DIO_toggle_Pin+0x3e>
 2c4:	83 27       	eor	r24, r19
 2c6:	85 bb       	out	0x15, r24	; 21
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
 2ca:	08 95       	ret
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
 2cc:	38 b3       	in	r19, 0x18	; 24
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <DIO_toggle_Pin+0x56>
 2d4:	88 0f       	add	r24, r24
 2d6:	2a 95       	dec	r18
 2d8:	ea f7       	brpl	.-6      	; 0x2d4 <DIO_toggle_Pin+0x54>
 2da:	83 27       	eor	r24, r19
 2dc:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 2de:	80 e0       	ldi	r24, 0x00	; 0
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
 2e0:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
 2e2:	32 b3       	in	r19, 0x12	; 18
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <DIO_toggle_Pin+0x6c>
 2ea:	88 0f       	add	r24, r24
 2ec:	2a 95       	dec	r18
 2ee:	ea f7       	brpl	.-6      	; 0x2ea <DIO_toggle_Pin+0x6a>
 2f0:	83 27       	eor	r24, r19
 2f2:	82 bb       	out	0x12, r24	; 18
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
			 break;
 2f6:	08 95       	ret

000002f8 <__vector_1>:
EXT_INT_ERROR_t EXT_INT2_CALL_BACK(PntrToFunc_t Copy_pntrToFunc_EXT_INT2_ISR)
{
	vgpntrToFunc_EXT_INT2_ISR=Copy_pntrToFunc_EXT_INT2_ISR;
}
EXT_INT_ISR(INT0_VECTOR)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	vgpntrToFunc_EXT_INT0_ISR();
 31a:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <vgpntrToFunc_EXT_INT0_ISR>
 31e:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <vgpntrToFunc_EXT_INT0_ISR+0x1>
 322:	09 95       	icall
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_2>:
EXT_INT_ISR(INT1_VECTOR)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
	vgpntrToFunc_EXT_INT1_ISR();	
 368:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <vgpntrToFunc_EXT_INT1_ISR>
 36c:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <vgpntrToFunc_EXT_INT1_ISR+0x1>
 370:	09 95       	icall
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_3>:
EXT_INT_ISR(INT2_VECTOR)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	vgpntrToFunc_EXT_INT2_ISR();
 3b6:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <vgpntrToFunc_EXT_INT2_ISR>
 3ba:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <vgpntrToFunc_EXT_INT2_ISR+0x1>
 3be:	09 95       	icall
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
