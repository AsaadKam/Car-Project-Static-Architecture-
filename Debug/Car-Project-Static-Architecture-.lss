
Car-Project-Static-Architecture-.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080006a  0080006a  00000edc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001752  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  00002822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001687  00000000  00000000  00003386  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c85  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c30  00000000  00000000  00005a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000076a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_7>
  20:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "PWM_PostBConfig.h"


int main()
{
  PWM_INIT(&str_Motor_0_PWM_INIT_CONFIG);
  92:	85 e6       	ldi	r24, 0x65	; 101
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 b5 01 	call	0x36a	; 0x36a <PWM_INIT>
  PWM_INIT(&str_Motor_1_PWM_INIT_CONFIG);
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 b5 01 	call	0x36a	; 0x36a <PWM_INIT>
  
  PWM_Start(PWM_TIMER0,31,50); 
  a2:	42 e3       	ldi	r20, 0x32	; 50
  a4:	6f e1       	ldi	r22, 0x1F	; 31
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PWM_Start>
  PWM_Start(PWM_TIMER1,30,70);
  ac:	46 e4       	ldi	r20, 0x46	; 70
  ae:	6e e1       	ldi	r22, 0x1E	; 30
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PWM_Start>
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x24>

000000b8 <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE>:
		break;
	}
}
static PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE(void)
{
	uint16_t u16_PWM_TIMER2_VALUE=(vsu8_PWM_TIMER2_Duty_Cycle*255)/100.0;
  b8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <vsu8_PWM_TIMER2_Duty_Cycle>
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	68 9f       	mul	r22, r24
  c0:	b0 01       	movw	r22, r0
  c2:	11 24       	eor	r1, r1
  c4:	07 2e       	mov	r0, r23
  c6:	00 0c       	add	r0, r0
  c8:	88 0b       	sbc	r24, r24
  ca:	99 0b       	sbc	r25, r25
  cc:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatsisf>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	48 ec       	ldi	r20, 0xC8	; 200
  d6:	52 e4       	ldi	r21, 0x42	; 66
  d8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divsf3>
  dc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixunssfsi>
	static uint16_t su16_PWM_TIMER2_Counter=0U;
	static uint8_t  su8_PWM_TIMER2_State=PWM_State_Inc;
	
	if(u16_PWM_TIMER2_VALUE==0U)
  e0:	61 15       	cp	r22, r1
  e2:	71 05       	cpc	r23, r1
  e4:	61 f1       	breq	.+88     	; 0x13e <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x86>
	{
		DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,0	);
		su8_PWM_TIMER2_State=PWM_NO_STATE;
	}
	else if(u16_PWM_TIMER2_VALUE==255U)
  e6:	6f 3f       	cpi	r22, 0xFF	; 255
  e8:	71 05       	cpc	r23, r1
  ea:	91 f1       	breq	.+100    	; 0x150 <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x98>
	{
		/*Do Nothing*/
	}


	switch(su8_PWM_TIMER2_State)
  ec:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <su8_PWM_TIMER2_State.1693>
  f0:	22 23       	and	r18, r18
  f2:	a1 f0       	breq	.+40     	; 0x11c <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x64>
  f4:	21 30       	cpi	r18, 0x01	; 1
  f6:	09 f0       	breq	.+2      	; 0xfa <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x42>
  f8:	51 c0       	rjmp	.+162    	; 0x19c <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0xe4>
		}
		break;
		
		case PWM_State_Dec:
		{
			if(su16_PWM_TIMER2_Counter==u16_PWM_TIMER2_VALUE)
  fa:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <su16_PWM_TIMER2_Counter.1692>
  fe:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <su16_PWM_TIMER2_Counter.1692+0x1>
 102:	62 17       	cp	r22, r18
 104:	73 07       	cpc	r23, r19
 106:	a9 f1       	breq	.+106    	; 0x172 <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0xba>
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER2_PIN);
			}
			else if(su16_PWM_TIMER2_Counter==1U)
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	79 f1       	breq	.+94     	; 0x16c <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0xb4>
			{
				su8_PWM_TIMER2_State=PWM_State_Inc;
			}

			su16_PWM_TIMER2_Counter--;
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
 112:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <su16_PWM_TIMER2_Counter.1692+0x1>
 116:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <su16_PWM_TIMER2_Counter.1692>
		{
			/*Do Nothing*/
		}
		break;
	}
}
 11a:	08 95       	ret

	switch(su8_PWM_TIMER2_State)
	{
		case PWM_State_Inc:
		{
			if(su16_PWM_TIMER2_Counter==u16_PWM_TIMER2_VALUE)
 11c:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <su16_PWM_TIMER2_Counter.1692>
 120:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <su16_PWM_TIMER2_Counter.1692+0x1>
 124:	62 17       	cp	r22, r18
 126:	73 07       	cpc	r23, r19
 128:	69 f1       	breq	.+90     	; 0x184 <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0xcc>
			{

				su16_PWM_TIMER2_Counter++;
				DIO_toggle_Pin(vsu8_PWM_TIMER2_PIN);
			}
			else if(su16_PWM_TIMER2_Counter==255U)
 12a:	2f 3f       	cpi	r18, 0xFF	; 255
 12c:	31 05       	cpc	r19, r1
 12e:	a1 f0       	breq	.+40     	; 0x158 <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0xa0>
				su8_PWM_TIMER2_State=PWM_State_Dec;
				su16_PWM_TIMER2_Counter--;
			}
			else
			{
				su16_PWM_TIMER2_Counter++;
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <su16_PWM_TIMER2_Counter.1692+0x1>
 138:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <su16_PWM_TIMER2_Counter.1692>
 13c:	08 95       	ret
	static uint16_t su16_PWM_TIMER2_Counter=0U;
	static uint8_t  su8_PWM_TIMER2_State=PWM_State_Inc;
	
	if(u16_PWM_TIMER2_VALUE==0U)
	{
		DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,0	);
 13e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <vsu8_PWM_TIMER2_PIN>
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_Write_Pin>
		su8_PWM_TIMER2_State=PWM_NO_STATE;
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <su8_PWM_TIMER2_State.1693>
 14e:	08 95       	ret
	}
	else if(u16_PWM_TIMER2_VALUE==255U)
	{
		su8_PWM_TIMER2_State=PWM_NO_STATE;
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <su8_PWM_TIMER2_State.1693>
 156:	08 95       	ret
				su16_PWM_TIMER2_Counter++;
				DIO_toggle_Pin(vsu8_PWM_TIMER2_PIN);
			}
			else if(su16_PWM_TIMER2_Counter==255U)
			{
				su8_PWM_TIMER2_State=PWM_State_Dec;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <su8_PWM_TIMER2_State.1693>
				su16_PWM_TIMER2_Counter--;
 15e:	8e ef       	ldi	r24, 0xFE	; 254
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <su16_PWM_TIMER2_Counter.1692+0x1>
 166:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <su16_PWM_TIMER2_Counter.1692>
 16a:	08 95       	ret
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER2_PIN);
			}
			else if(su16_PWM_TIMER2_Counter==1U)
			{
				su8_PWM_TIMER2_State=PWM_State_Inc;
 16c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <su8_PWM_TIMER2_State.1693>
 170:	ce cf       	rjmp	.-100    	; 0x10e <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x56>
		
		case PWM_State_Dec:
		{
			if(su16_PWM_TIMER2_Counter==u16_PWM_TIMER2_VALUE)
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER2_PIN);
 172:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <vsu8_PWM_TIMER2_PIN>
 176:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_toggle_Pin>
 17a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <su16_PWM_TIMER2_Counter.1692>
 17e:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <su16_PWM_TIMER2_Counter.1692+0x1>
 182:	c5 cf       	rjmp	.-118    	; 0x10e <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x56>
		case PWM_State_Inc:
		{
			if(su16_PWM_TIMER2_Counter==u16_PWM_TIMER2_VALUE)
			{

				su16_PWM_TIMER2_Counter++;
 184:	ab 01       	movw	r20, r22
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <su16_PWM_TIMER2_Counter.1692+0x1>
 18e:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <su16_PWM_TIMER2_Counter.1692>
				DIO_toggle_Pin(vsu8_PWM_TIMER2_PIN);
 192:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <vsu8_PWM_TIMER2_PIN>
 196:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_toggle_Pin>
 19a:	08 95       	ret
 19c:	08 95       	ret

0000019e <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE>:
		break;
	}
}
static PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE(void)
{
	uint16_t u16_PWM_TIMER1_VALUE=(vsu8_PWM_TIMER1_Duty_Cycle*255)/100.0;
 19e:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <vsu8_PWM_TIMER1_Duty_Cycle>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	68 9f       	mul	r22, r24
 1a6:	b0 01       	movw	r22, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	07 2e       	mov	r0, r23
 1ac:	00 0c       	add	r0, r0
 1ae:	88 0b       	sbc	r24, r24
 1b0:	99 0b       	sbc	r25, r25
 1b2:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatsisf>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	48 ec       	ldi	r20, 0xC8	; 200
 1bc:	52 e4       	ldi	r21, 0x42	; 66
 1be:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divsf3>
 1c2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixunssfsi>
	static uint16_t su16_PWM_TIMER1_Counter=0U;
	static uint8_t  su8_PWM_TIMER1_State=PWM_State_Inc;
	
	if(u16_PWM_TIMER1_VALUE==0U)
 1c6:	61 15       	cp	r22, r1
 1c8:	71 05       	cpc	r23, r1
 1ca:	61 f1       	breq	.+88     	; 0x224 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x86>
	{
		DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,0);
		su8_PWM_TIMER1_State=PWM_NO_STATE;
	}
	else if(u16_PWM_TIMER1_VALUE==255U)
 1cc:	6f 3f       	cpi	r22, 0xFF	; 255
 1ce:	71 05       	cpc	r23, r1
 1d0:	91 f1       	breq	.+100    	; 0x236 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x98>
	{
		/*Do Nothing*/
	}


	switch(su8_PWM_TIMER1_State)
 1d2:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <su8_PWM_TIMER1_State.1683>
 1d6:	22 23       	and	r18, r18
 1d8:	a1 f0       	breq	.+40     	; 0x202 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x64>
 1da:	21 30       	cpi	r18, 0x01	; 1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x42>
 1de:	51 c0       	rjmp	.+162    	; 0x282 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0xe4>
		}
		break;
		
		case PWM_State_Dec:
		{
			if(su16_PWM_TIMER1_Counter==u16_PWM_TIMER1_VALUE)
 1e0:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <su16_PWM_TIMER1_Counter.1682>
 1e4:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <su16_PWM_TIMER1_Counter.1682+0x1>
 1e8:	62 17       	cp	r22, r18
 1ea:	73 07       	cpc	r23, r19
 1ec:	a9 f1       	breq	.+106    	; 0x258 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0xba>
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER1_PIN);
			}
			else if(su16_PWM_TIMER1_Counter==1U)
 1ee:	21 30       	cpi	r18, 0x01	; 1
 1f0:	31 05       	cpc	r19, r1
 1f2:	79 f1       	breq	.+94     	; 0x252 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0xb4>
			{
				su8_PWM_TIMER1_State=PWM_State_Inc;
			}

			su16_PWM_TIMER1_Counter--;
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	31 09       	sbc	r19, r1
 1f8:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <su16_PWM_TIMER1_Counter.1682+0x1>
 1fc:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <su16_PWM_TIMER1_Counter.1682>
		{
			/*Do Nothing*/
		}
		break;
	}
}
 200:	08 95       	ret

	switch(su8_PWM_TIMER1_State)
	{
		case PWM_State_Inc:
		{
			if(su16_PWM_TIMER1_Counter==u16_PWM_TIMER1_VALUE)
 202:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <su16_PWM_TIMER1_Counter.1682>
 206:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <su16_PWM_TIMER1_Counter.1682+0x1>
 20a:	62 17       	cp	r22, r18
 20c:	73 07       	cpc	r23, r19
 20e:	69 f1       	breq	.+90     	; 0x26a <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0xcc>
			{

				su16_PWM_TIMER1_Counter++;
				DIO_toggle_Pin(vsu8_PWM_TIMER1_PIN);
			}
			else if(su16_PWM_TIMER1_Counter==255U)
 210:	2f 3f       	cpi	r18, 0xFF	; 255
 212:	31 05       	cpc	r19, r1
 214:	a1 f0       	breq	.+40     	; 0x23e <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0xa0>
				su8_PWM_TIMER1_State=PWM_State_Dec;
				su16_PWM_TIMER1_Counter--;
			}
			else
			{
				su16_PWM_TIMER1_Counter++;
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <su16_PWM_TIMER1_Counter.1682+0x1>
 21e:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <su16_PWM_TIMER1_Counter.1682>
 222:	08 95       	ret
	static uint16_t su16_PWM_TIMER1_Counter=0U;
	static uint8_t  su8_PWM_TIMER1_State=PWM_State_Inc;
	
	if(u16_PWM_TIMER1_VALUE==0U)
	{
		DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,0);
 224:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <vsu8_PWM_TIMER1_PIN>
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_Write_Pin>
		su8_PWM_TIMER1_State=PWM_NO_STATE;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <su8_PWM_TIMER1_State.1683>
 234:	08 95       	ret
	}
	else if(u16_PWM_TIMER1_VALUE==255U)
	{
		su8_PWM_TIMER1_State=PWM_NO_STATE;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <su8_PWM_TIMER1_State.1683>
 23c:	08 95       	ret
				su16_PWM_TIMER1_Counter++;
				DIO_toggle_Pin(vsu8_PWM_TIMER1_PIN);
			}
			else if(su16_PWM_TIMER1_Counter==255U)
			{
				su8_PWM_TIMER1_State=PWM_State_Dec;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <su8_PWM_TIMER1_State.1683>
				su16_PWM_TIMER1_Counter--;
 244:	8e ef       	ldi	r24, 0xFE	; 254
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <su16_PWM_TIMER1_Counter.1682+0x1>
 24c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <su16_PWM_TIMER1_Counter.1682>
 250:	08 95       	ret
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER1_PIN);
			}
			else if(su16_PWM_TIMER1_Counter==1U)
			{
				su8_PWM_TIMER1_State=PWM_State_Inc;
 252:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <su8_PWM_TIMER1_State.1683>
 256:	ce cf       	rjmp	.-100    	; 0x1f4 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x56>
		
		case PWM_State_Dec:
		{
			if(su16_PWM_TIMER1_Counter==u16_PWM_TIMER1_VALUE)
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER1_PIN);
 258:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <vsu8_PWM_TIMER1_PIN>
 25c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_toggle_Pin>
 260:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <su16_PWM_TIMER1_Counter.1682>
 264:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <su16_PWM_TIMER1_Counter.1682+0x1>
 268:	c5 cf       	rjmp	.-118    	; 0x1f4 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x56>
		case PWM_State_Inc:
		{
			if(su16_PWM_TIMER1_Counter==u16_PWM_TIMER1_VALUE)
			{

				su16_PWM_TIMER1_Counter++;
 26a:	ab 01       	movw	r20, r22
 26c:	4f 5f       	subi	r20, 0xFF	; 255
 26e:	5f 4f       	sbci	r21, 0xFF	; 255
 270:	50 93 6e 00 	sts	0x006E, r21	; 0x80006e <su16_PWM_TIMER1_Counter.1682+0x1>
 274:	40 93 6d 00 	sts	0x006D, r20	; 0x80006d <su16_PWM_TIMER1_Counter.1682>
				DIO_toggle_Pin(vsu8_PWM_TIMER1_PIN);
 278:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <vsu8_PWM_TIMER1_PIN>
 27c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_toggle_Pin>
 280:	08 95       	ret
 282:	08 95       	ret

00000284 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE>:
volatile  static uint8_t  vsu8_PWM_COUNT_TIMER2=0;


static PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE(void)
{
           uint16_t u16_PWM_TIMER0_VALUE=(vsu8_PWM_TIMER0_Duty_Cycle*255)/100.0;
 284:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <vsu8_PWM_TIMER0_Duty_Cycle>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	68 9f       	mul	r22, r24
 28c:	b0 01       	movw	r22, r0
 28e:	11 24       	eor	r1, r1
 290:	07 2e       	mov	r0, r23
 292:	00 0c       	add	r0, r0
 294:	88 0b       	sbc	r24, r24
 296:	99 0b       	sbc	r25, r25
 298:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatsisf>
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	48 ec       	ldi	r20, 0xC8	; 200
 2a2:	52 e4       	ldi	r21, 0x42	; 66
 2a4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divsf3>
 2a8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixunssfsi>
	static uint16_t su16_PWM_TIMER0_Counter=0U;
	static uint8_t  su8_PWM_TIMER0_State=PWM_State_Inc;

	if(u16_PWM_TIMER0_VALUE==0U)
 2ac:	61 15       	cp	r22, r1
 2ae:	71 05       	cpc	r23, r1
 2b0:	61 f1       	breq	.+88     	; 0x30a <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x86>
	{
		DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,0);
		su8_PWM_TIMER0_State=PWM_NO_STATE;
	}
	else if(u16_PWM_TIMER0_VALUE==255U)
 2b2:	6f 3f       	cpi	r22, 0xFF	; 255
 2b4:	71 05       	cpc	r23, r1
 2b6:	91 f1       	breq	.+100    	; 0x31c <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x98>
	{
		/*Do Nothing*/
	}


	switch(su8_PWM_TIMER0_State)
 2b8:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <su8_PWM_TIMER0_State.1673>
 2bc:	22 23       	and	r18, r18
 2be:	a1 f0       	breq	.+40     	; 0x2e8 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x64>
 2c0:	21 30       	cpi	r18, 0x01	; 1
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x42>
 2c4:	51 c0       	rjmp	.+162    	; 0x368 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0xe4>
		}
		break;
			       
		case PWM_State_Dec:
		{
			if(su16_PWM_TIMER0_Counter==u16_PWM_TIMER0_VALUE)
 2c6:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 2ca:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
 2ce:	62 17       	cp	r22, r18
 2d0:	73 07       	cpc	r23, r19
 2d2:	a9 f1       	breq	.+106    	; 0x33e <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0xba>
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER0_PIN);
			}
			else if(su16_PWM_TIMER0_Counter==1U)
 2d4:	21 30       	cpi	r18, 0x01	; 1
 2d6:	31 05       	cpc	r19, r1
 2d8:	79 f1       	breq	.+94     	; 0x338 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0xb4>
			{
				su8_PWM_TIMER0_State=PWM_State_Inc;
			}

			su16_PWM_TIMER0_Counter--;
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	31 09       	sbc	r19, r1
 2de:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <__data_end+0x1>
 2e2:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
		{
			/*Do Nothing*/
		}
		break;
	}
}
 2e6:	08 95       	ret

	switch(su8_PWM_TIMER0_State)
	{
		case PWM_State_Inc:
		{
			if(su16_PWM_TIMER0_Counter==u16_PWM_TIMER0_VALUE)
 2e8:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 2ec:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
 2f0:	62 17       	cp	r22, r18
 2f2:	73 07       	cpc	r23, r19
 2f4:	69 f1       	breq	.+90     	; 0x350 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0xcc>
			{

				su16_PWM_TIMER0_Counter++;
				DIO_toggle_Pin(vsu8_PWM_TIMER0_PIN);
			}
			else if(su16_PWM_TIMER0_Counter==255U)
 2f6:	2f 3f       	cpi	r18, 0xFF	; 255
 2f8:	31 05       	cpc	r19, r1
 2fa:	a1 f0       	breq	.+40     	; 0x324 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0xa0>
				su8_PWM_TIMER0_State=PWM_State_Dec;
				su16_PWM_TIMER0_Counter--;
			}
			else
			{
				su16_PWM_TIMER0_Counter++;
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <__data_end+0x1>
 304:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
 308:	08 95       	ret
	static uint16_t su16_PWM_TIMER0_Counter=0U;
	static uint8_t  su8_PWM_TIMER0_State=PWM_State_Inc;

	if(u16_PWM_TIMER0_VALUE==0U)
	{
		DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,0);
 30a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <vsu8_PWM_TIMER0_PIN>
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_Write_Pin>
		su8_PWM_TIMER0_State=PWM_NO_STATE;
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <su8_PWM_TIMER0_State.1673>
 31a:	08 95       	ret
	}
	else if(u16_PWM_TIMER0_VALUE==255U)
	{
		su8_PWM_TIMER0_State=PWM_NO_STATE;
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <su8_PWM_TIMER0_State.1673>
 322:	08 95       	ret
				su16_PWM_TIMER0_Counter++;
				DIO_toggle_Pin(vsu8_PWM_TIMER0_PIN);
			}
			else if(su16_PWM_TIMER0_Counter==255U)
			{
				su8_PWM_TIMER0_State=PWM_State_Dec;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <su8_PWM_TIMER0_State.1673>
				su16_PWM_TIMER0_Counter--;
 32a:	8e ef       	ldi	r24, 0xFE	; 254
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 332:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 336:	08 95       	ret
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER0_PIN);
			}
			else if(su16_PWM_TIMER0_Counter==1U)
			{
				su8_PWM_TIMER0_State=PWM_State_Inc;
 338:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <su8_PWM_TIMER0_State.1673>
 33c:	ce cf       	rjmp	.-100    	; 0x2da <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x56>
			       
		case PWM_State_Dec:
		{
			if(su16_PWM_TIMER0_Counter==u16_PWM_TIMER0_VALUE)
			{
				DIO_toggle_Pin(vsu8_PWM_TIMER0_PIN);
 33e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <vsu8_PWM_TIMER0_PIN>
 342:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_toggle_Pin>
 346:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 34a:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
 34e:	c5 cf       	rjmp	.-118    	; 0x2da <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x56>
		case PWM_State_Inc:
		{
			if(su16_PWM_TIMER0_Counter==u16_PWM_TIMER0_VALUE)
			{

				su16_PWM_TIMER0_Counter++;
 350:	ab 01       	movw	r20, r22
 352:	4f 5f       	subi	r20, 0xFF	; 255
 354:	5f 4f       	sbci	r21, 0xFF	; 255
 356:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <__data_end+0x1>
 35a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__data_end>
				DIO_toggle_Pin(vsu8_PWM_TIMER0_PIN);
 35e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <vsu8_PWM_TIMER0_PIN>
 362:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_toggle_Pin>
 366:	08 95       	ret
 368:	08 95       	ret

0000036a <PWM_INIT>:
		break;
	}
}

PWM_ERROR_t PWM_INIT(gstr_PWM_INIT_CONFIG*pstr_PWM_INIT_CONFIG)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	00 d0       	rcall	.+0      	; 0x370 <PWM_INIT+0x6>
 370:	00 d0       	rcall	.+0      	; 0x372 <PWM_INIT+0x8>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
	
	gStrTimerConfiguration_t Str_PWM_Timer_Config;
	PWM_ERROR_t PWM_Error_PWM_INIT=PWM_INIT_NO_ERROR;
	
	if(pstr_PWM_INIT_CONFIG->u8_PWM_Execution_Method==PWM_Software_Config)
 376:	fc 01       	movw	r30, r24
 378:	20 81       	ld	r18, Z
 37a:	21 30       	cpi	r18, 0x01	; 1
 37c:	39 f0       	breq	.+14     	; 0x38c <PWM_INIT+0x22>
	}
	else 
	{
		
	}
}
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret
	gStrTimerConfiguration_t Str_PWM_Timer_Config;
	PWM_ERROR_t PWM_Error_PWM_INIT=PWM_INIT_NO_ERROR;
	
	if(pstr_PWM_INIT_CONFIG->u8_PWM_Execution_Method==PWM_Software_Config)
	{
		if(pstr_PWM_INIT_CONFIG->u8_PWM_Mode==PWM_Phase_Corret_Config)
 38c:	21 81       	ldd	r18, Z+1	; 0x01
 38e:	23 30       	cpi	r18, 0x03	; 3
 390:	b1 f7       	brne	.-20     	; 0x37e <PWM_INIT+0x14>
		{
			if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type<TIMER0  ||pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type>TIMER2)
 392:	22 81       	ldd	r18, Z+2	; 0x02
 394:	23 30       	cpi	r18, 0x03	; 3
 396:	98 f7       	brcc	.-26     	; 0x37e <PWM_INIT+0x14>
			{
			}
			else
			{
				if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER0)
 398:	22 23       	and	r18, r18
 39a:	91 f0       	breq	.+36     	; 0x3c0 <PWM_INIT+0x56>
				{
					vsu8_PWM_COUNT_TIMER0=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Count;
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER1)
				{
					vsu8_PWM_COUNT_TIMER1=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Count;
 39c:	fc 01       	movw	r30, r24
 39e:	34 81       	ldd	r19, Z+4	; 0x04
			{
				if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER0)
				{
					vsu8_PWM_COUNT_TIMER0=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Count;
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER1)
 3a0:	21 30       	cpi	r18, 0x01	; 1
 3a2:	91 f0       	breq	.+36     	; 0x3c8 <PWM_INIT+0x5e>
				{
					vsu8_PWM_COUNT_TIMER1=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Count;
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER2)
				{
					vsu8_PWM_COUNT_TIMER2=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Count;
 3a4:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <vsu8_PWM_COUNT_TIMER2>
 3a8:	fc 01       	movw	r30, r24
				}
				Str_PWM_Timer_Config.Timer_Channel=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type;
 3aa:	29 83       	std	Y+1, r18	; 0x01
				Str_PWM_Timer_Config.Timer_Psc=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Prescaler;
 3ac:	83 81       	ldd	r24, Z+3	; 0x03
 3ae:	8a 83       	std	Y+2, r24	; 0x02
				Str_PWM_Timer_Config.Timer_Mode=COUNTER_MODE;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	8b 83       	std	Y+3, r24	; 0x03
				Str_PWM_Timer_Config.Interrupt_Mode=INTERRUPT;			
 3b4:	8c 83       	std	Y+4, r24	; 0x04
				Timer_Init(&Str_PWM_Timer_Config);
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 a5 03 	call	0x74a	; 0x74a <Timer_Init>
 3be:	df cf       	rjmp	.-66     	; 0x37e <PWM_INIT+0x14>
			}
			else
			{
				if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER0)
				{
					vsu8_PWM_COUNT_TIMER0=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Count;
 3c0:	34 81       	ldd	r19, Z+4	; 0x04
 3c2:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <vsu8_PWM_COUNT_TIMER0>
 3c6:	f0 cf       	rjmp	.-32     	; 0x3a8 <PWM_INIT+0x3e>
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER1)
				{
					vsu8_PWM_COUNT_TIMER1=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Count;
 3c8:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <vsu8_PWM_COUNT_TIMER1>
 3cc:	ed cf       	rjmp	.-38     	; 0x3a8 <PWM_INIT+0x3e>

000003ce <PWM_Start>:
		
	}
}

PWM_ERROR_t PWM_Start(uint8_t u8_TIMER_Used,uint8_t u8_PWM_Pin,uint8_t u8_PWM_Duty_Cycle)
{
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	c8 2f       	mov	r28, r24
 3d6:	d6 2f       	mov	r29, r22
 3d8:	14 2f       	mov	r17, r20
    DIO_Init_Pin(u8_PWM_Pin,1);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	8d 2f       	mov	r24, r29
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_Init_Pin>
	DIO_Write_Pin(u8_PWM_Pin,1);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	8d 2f       	mov	r24, r29
 3ea:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_Write_Pin>
    
	if(u8_TIMER_Used==TIMER0)
 3ee:	cc 23       	and	r28, r28
 3f0:	41 f0       	breq	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		vsu8_PWM_TIMER0_Duty_Cycle=u8_PWM_Duty_Cycle;
		Timer_Start(u8_TIMER_Used,vsu8_PWM_COUNT_TIMER0,PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE);	
		vsu8_PWM_TIMER0_PIN=u8_PWM_Pin;
	}
	else if(u8_TIMER_Used==TIMER1)
 3f2:	c1 30       	cpi	r28, 0x01	; 1
 3f4:	31 f1       	breq	.+76     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		vsu8_PWM_TIMER1_Duty_Cycle=u8_PWM_Duty_Cycle;		
		Timer_Start(u8_TIMER_Used,vsu8_PWM_COUNT_TIMER1,PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE);	
	    vsu8_PWM_TIMER1_PIN=u8_PWM_Pin;	
	}
	else if(u8_TIMER_Used==TIMER2)
 3f6:	c2 30       	cpi	r28, 0x02	; 2
 3f8:	a1 f0       	breq	.+40     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	else
	{
		
	}	

 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	08 95       	ret
    DIO_Init_Pin(u8_PWM_Pin,1);
	DIO_Write_Pin(u8_PWM_Pin,1);
    
	if(u8_TIMER_Used==TIMER0)
	{
		vsu8_PWM_TIMER0_Duty_Cycle=u8_PWM_Duty_Cycle;
 402:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <vsu8_PWM_TIMER0_Duty_Cycle>
		Timer_Start(u8_TIMER_Used,vsu8_PWM_COUNT_TIMER0,PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE);	
 406:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <vsu8_PWM_COUNT_TIMER0>
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	42 e4       	ldi	r20, 0x42	; 66
 40e:	51 e0       	ldi	r21, 0x01	; 1
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 f7 03 	call	0x7ee	; 0x7ee <Timer_Start>
		vsu8_PWM_TIMER0_PIN=u8_PWM_Pin;
 416:	d0 93 78 00 	sts	0x0078, r29	; 0x800078 <vsu8_PWM_TIMER0_PIN>
	else
	{
		
	}	

 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	08 95       	ret
		Timer_Start(u8_TIMER_Used,vsu8_PWM_COUNT_TIMER1,PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE);	
	    vsu8_PWM_TIMER1_PIN=u8_PWM_Pin;	
	}
	else if(u8_TIMER_Used==TIMER2)
	{
		vsu8_PWM_TIMER2_Duty_Cycle=u8_PWM_Duty_Cycle;		
 422:	10 93 79 00 	sts	0x0079, r17	; 0x800079 <vsu8_PWM_TIMER2_Duty_Cycle>
		Timer_Start(u8_TIMER_Used,vsu8_PWM_COUNT_TIMER2,PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE);
 426:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <vsu8_PWM_COUNT_TIMER2>
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	4c e5       	ldi	r20, 0x5C	; 92
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 f7 03 	call	0x7ee	; 0x7ee <Timer_Start>
	    vsu8_PWM_TIMER2_PIN=u8_PWM_Pin;					
 436:	d0 93 76 00 	sts	0x0076, r29	; 0x800076 <vsu8_PWM_TIMER2_PIN>
	else
	{
		
	}	

 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	08 95       	ret
		Timer_Start(u8_TIMER_Used,vsu8_PWM_COUNT_TIMER0,PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE);	
		vsu8_PWM_TIMER0_PIN=u8_PWM_Pin;
	}
	else if(u8_TIMER_Used==TIMER1)
	{
		vsu8_PWM_TIMER1_Duty_Cycle=u8_PWM_Duty_Cycle;		
 442:	10 93 7a 00 	sts	0x007A, r17	; 0x80007a <vsu8_PWM_TIMER1_Duty_Cycle>
		Timer_Start(u8_TIMER_Used,vsu8_PWM_COUNT_TIMER1,PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE);	
 446:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <vsu8_PWM_COUNT_TIMER1>
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	4f ec       	ldi	r20, 0xCF	; 207
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 f7 03 	call	0x7ee	; 0x7ee <Timer_Start>
	    vsu8_PWM_TIMER1_PIN=u8_PWM_Pin;	
 456:	d0 93 77 00 	sts	0x0077, r29	; 0x800077 <vsu8_PWM_TIMER1_PIN>
 45a:	cf cf       	rjmp	.-98     	; 0x3fa <PWM_Start+0x2c>

0000045c <__vector_16>:
	 }
	 return sgADC_Error_ADC_READ_API; 
 }
 
ADC_ISR_CODE()
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	DIO_Init_Pin(26,1);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	8a e1       	ldi	r24, 0x1A	; 26
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_Init_Pin>
	DIO_toggle_Pin(26);
 48a:	8a e1       	ldi	r24, 0x1A	; 26
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DIO_toggle_Pin>
	
	TIMER_CLR_INT_FLAG(TIMER1_B_COMP_FLAG);
 492:	88 e0       	ldi	r24, 0x08	; 8
 494:	88 bf       	out	0x38, r24	; 56
	
	if(NullPointer!=sgPntrToFun_ADC_ISR)
 496:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <sgPntrToFun_ADC_ISR>
 49a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <sgPntrToFun_ADC_ISR+0x1>
 49e:	89 2b       	or	r24, r25
 4a0:	29 f0       	breq	.+10     	; 0x4ac <__vector_16+0x50>
	{
			sgPntrToFun_ADC_ISR();
 4a2:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <sgPntrToFun_ADC_ISR>
 4a6:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <sgPntrToFun_ADC_ISR+0x1>
 4aa:	09 95       	icall
	{
		/*Do Nothing*/
	}

	
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <DIO_Init_Pin>:
	switch(por)
	{
		case 'A':TOGGLE_PORT(WriteRegisterA);
			  break;
		case 'B':TOGGLE_PORT(WriteRegisterB);
		      break;
 4ce:	80 32       	cpi	r24, 0x20	; 32
 4d0:	f0 f4       	brcc	.+60     	; 0x50e <DIO_Init_Pin+0x40>
 4d2:	98 2f       	mov	r25, r24
 4d4:	97 70       	andi	r25, 0x07	; 7
 4d6:	86 95       	lsr	r24
 4d8:	86 95       	lsr	r24
 4da:	86 95       	lsr	r24
 4dc:	8f 5b       	subi	r24, 0xBF	; 191
 4de:	83 34       	cpi	r24, 0x43	; 67
 4e0:	c1 f0       	breq	.+48     	; 0x512 <DIO_Init_Pin+0x44>
 4e2:	84 34       	cpi	r24, 0x44	; 68
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <DIO_Init_Pin+0x1a>
 4e6:	42 c0       	rjmp	.+132    	; 0x56c <DIO_Init_Pin+0x9e>
 4e8:	82 34       	cpi	r24, 0x42	; 66
 4ea:	79 f1       	breq	.+94     	; 0x54a <DIO_Init_Pin+0x7c>
 4ec:	4a b3       	in	r20, 0x1a	; 26
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	61 11       	cpse	r22, r1
 4f4:	1f c0       	rjmp	.+62     	; 0x534 <DIO_Init_Pin+0x66>
 4f6:	b9 01       	movw	r22, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_Init_Pin+0x30>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	9a 95       	dec	r25
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_Init_Pin+0x2c>
 502:	cb 01       	movw	r24, r22
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	8a bb       	out	0x1a, r24	; 26
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret
 512:	44 b3       	in	r20, 0x14	; 20
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	61 11       	cpse	r22, r1
 51a:	38 c0       	rjmp	.+112    	; 0x58c <DIO_Init_Pin+0xbe>
 51c:	b9 01       	movw	r22, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_Init_Pin+0x56>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	9a 95       	dec	r25
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_Init_Pin+0x52>
 528:	cb 01       	movw	r24, r22
 52a:	80 95       	com	r24
 52c:	84 23       	and	r24, r20
 52e:	84 bb       	out	0x14, r24	; 20
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret
 534:	b9 01       	movw	r22, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_Init_Pin+0x6e>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	9a 95       	dec	r25
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_Init_Pin+0x6a>
 540:	cb 01       	movw	r24, r22
 542:	84 2b       	or	r24, r20
 544:	8a bb       	out	0x1a, r24	; 26
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret
 54a:	47 b3       	in	r20, 0x17	; 23
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	61 11       	cpse	r22, r1
 552:	27 c0       	rjmp	.+78     	; 0x5a2 <DIO_Init_Pin+0xd4>
 554:	b9 01       	movw	r22, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_Init_Pin+0x8e>
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	9a 95       	dec	r25
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_Init_Pin+0x8a>
 560:	cb 01       	movw	r24, r22
 562:	80 95       	com	r24
 564:	84 23       	and	r24, r20
 566:	87 bb       	out	0x17, r24	; 23
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	08 95       	ret
 56c:	41 b3       	in	r20, 0x11	; 17
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	66 23       	and	r22, r22
 574:	09 f1       	breq	.+66     	; 0x5b8 <DIO_Init_Pin+0xea>
 576:	b9 01       	movw	r22, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_Init_Pin+0xb0>
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	9a 95       	dec	r25
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_Init_Pin+0xac>
 582:	cb 01       	movw	r24, r22
 584:	84 2b       	or	r24, r20
 586:	81 bb       	out	0x11, r24	; 17
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	08 95       	ret
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_Init_Pin+0xc6>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	9a 95       	dec	r25
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_Init_Pin+0xc2>
 598:	cb 01       	movw	r24, r22
 59a:	84 2b       	or	r24, r20
 59c:	84 bb       	out	0x14, r24	; 20
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret
 5a2:	b9 01       	movw	r22, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_Init_Pin+0xdc>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	9a 95       	dec	r25
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_Init_Pin+0xd8>
 5ae:	cb 01       	movw	r24, r22
 5b0:	84 2b       	or	r24, r20
 5b2:	87 bb       	out	0x17, r24	; 23
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
 5b8:	b9 01       	movw	r22, r18
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_Init_Pin+0xf2>
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	9a 95       	dec	r25
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_Init_Pin+0xee>
 5c4:	cb 01       	movw	r24, r22
 5c6:	80 95       	com	r24
 5c8:	84 23       	and	r24, r20
 5ca:	81 bb       	out	0x11, r24	; 17
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	08 95       	ret

000005d0 <DIO_Write_Pin>:
 5d0:	80 32       	cpi	r24, 0x20	; 32
 5d2:	f0 f4       	brcc	.+60     	; 0x610 <DIO_Write_Pin+0x40>
 5d4:	98 2f       	mov	r25, r24
 5d6:	97 70       	andi	r25, 0x07	; 7
 5d8:	86 95       	lsr	r24
 5da:	86 95       	lsr	r24
 5dc:	86 95       	lsr	r24
 5de:	8f 5b       	subi	r24, 0xBF	; 191
 5e0:	83 34       	cpi	r24, 0x43	; 67
 5e2:	c1 f0       	breq	.+48     	; 0x614 <DIO_Write_Pin+0x44>
 5e4:	84 34       	cpi	r24, 0x44	; 68
 5e6:	09 f4       	brne	.+2      	; 0x5ea <DIO_Write_Pin+0x1a>
 5e8:	42 c0       	rjmp	.+132    	; 0x66e <DIO_Write_Pin+0x9e>
 5ea:	82 34       	cpi	r24, 0x42	; 66
 5ec:	79 f1       	breq	.+94     	; 0x64c <DIO_Write_Pin+0x7c>
 5ee:	4b b3       	in	r20, 0x1b	; 27
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	61 11       	cpse	r22, r1
 5f6:	1f c0       	rjmp	.+62     	; 0x636 <DIO_Write_Pin+0x66>
 5f8:	b9 01       	movw	r22, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_Write_Pin+0x30>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	9a 95       	dec	r25
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_Write_Pin+0x2c>
 604:	cb 01       	movw	r24, r22
 606:	80 95       	com	r24
 608:	84 23       	and	r24, r20
 60a:	8b bb       	out	0x1b, r24	; 27
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	08 95       	ret
 614:	45 b3       	in	r20, 0x15	; 21
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	61 11       	cpse	r22, r1
 61c:	38 c0       	rjmp	.+112    	; 0x68e <DIO_Write_Pin+0xbe>
 61e:	b9 01       	movw	r22, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_Write_Pin+0x56>
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	9a 95       	dec	r25
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_Write_Pin+0x52>
 62a:	cb 01       	movw	r24, r22
 62c:	80 95       	com	r24
 62e:	84 23       	and	r24, r20
 630:	85 bb       	out	0x15, r24	; 21
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_Write_Pin+0x6e>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	9a 95       	dec	r25
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_Write_Pin+0x6a>
 642:	cb 01       	movw	r24, r22
 644:	84 2b       	or	r24, r20
 646:	8b bb       	out	0x1b, r24	; 27
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	08 95       	ret
 64c:	48 b3       	in	r20, 0x18	; 24
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	61 11       	cpse	r22, r1
 654:	27 c0       	rjmp	.+78     	; 0x6a4 <DIO_Write_Pin+0xd4>
 656:	b9 01       	movw	r22, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_Write_Pin+0x8e>
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	9a 95       	dec	r25
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_Write_Pin+0x8a>
 662:	cb 01       	movw	r24, r22
 664:	80 95       	com	r24
 666:	84 23       	and	r24, r20
 668:	88 bb       	out	0x18, r24	; 24
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	08 95       	ret
 66e:	42 b3       	in	r20, 0x12	; 18
 670:	21 e0       	ldi	r18, 0x01	; 1
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	66 23       	and	r22, r22
 676:	09 f1       	breq	.+66     	; 0x6ba <DIO_Write_Pin+0xea>
 678:	b9 01       	movw	r22, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_Write_Pin+0xb0>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	9a 95       	dec	r25
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_Write_Pin+0xac>
 684:	cb 01       	movw	r24, r22
 686:	84 2b       	or	r24, r20
 688:	82 bb       	out	0x12, r24	; 18
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
 68e:	b9 01       	movw	r22, r18
 690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_Write_Pin+0xc6>
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	9a 95       	dec	r25
 698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_Write_Pin+0xc2>
 69a:	cb 01       	movw	r24, r22
 69c:	84 2b       	or	r24, r20
 69e:	85 bb       	out	0x15, r24	; 21
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	08 95       	ret
 6a4:	b9 01       	movw	r22, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_Write_Pin+0xdc>
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	9a 95       	dec	r25
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_Write_Pin+0xd8>
 6b0:	cb 01       	movw	r24, r22
 6b2:	84 2b       	or	r24, r20
 6b4:	88 bb       	out	0x18, r24	; 24
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
 6ba:	b9 01       	movw	r22, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_Write_Pin+0xf2>
 6be:	66 0f       	add	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	9a 95       	dec	r25
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_Write_Pin+0xee>
 6c6:	cb 01       	movw	r24, r22
 6c8:	80 95       	com	r24
 6ca:	84 23       	and	r24, r20
 6cc:	82 bb       	out	0x12, r24	; 18
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	08 95       	ret

000006d2 <DIO_toggle_Pin>:
return DIO_ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 6d2:	80 32       	cpi	r24, 0x20	; 32
 6d4:	b8 f4       	brcc	.+46     	; 0x704 <DIO_toggle_Pin+0x32>
	else
	{
		por='A'+pin/PortSize;
		pin=pin%PortSize;
 6d6:	28 2f       	mov	r18, r24
 6d8:	27 70       	andi	r18, 0x07	; 7
	}
	
	switch(por)
 6da:	86 95       	lsr	r24
 6dc:	86 95       	lsr	r24
 6de:	86 95       	lsr	r24
 6e0:	8f 5b       	subi	r24, 0xBF	; 191
 6e2:	83 34       	cpi	r24, 0x43	; 67
 6e4:	89 f0       	breq	.+34     	; 0x708 <DIO_toggle_Pin+0x36>
 6e6:	84 34       	cpi	r24, 0x44	; 68
 6e8:	29 f1       	breq	.+74     	; 0x734 <DIO_toggle_Pin+0x62>
 6ea:	82 34       	cpi	r24, 0x42	; 66
 6ec:	c1 f0       	breq	.+48     	; 0x71e <DIO_toggle_Pin+0x4c>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
 6ee:	3b b3       	in	r19, 0x1b	; 27
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <DIO_toggle_Pin+0x26>
 6f6:	88 0f       	add	r24, r24
 6f8:	2a 95       	dec	r18
 6fa:	ea f7       	brpl	.-6      	; 0x6f6 <DIO_toggle_Pin+0x24>
 6fc:	83 27       	eor	r24, r19
 6fe:	8b bb       	out	0x1b, r24	; 27
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 700:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
 702:	08 95       	ret
return DIO_ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
 704:	81 e0       	ldi	r24, 0x01	; 1
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
}
 706:	08 95       	ret
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
 708:	35 b3       	in	r19, 0x15	; 21
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	01 c0       	rjmp	.+2      	; 0x712 <DIO_toggle_Pin+0x40>
 710:	88 0f       	add	r24, r24
 712:	2a 95       	dec	r18
 714:	ea f7       	brpl	.-6      	; 0x710 <DIO_toggle_Pin+0x3e>
 716:	83 27       	eor	r24, r19
 718:	85 bb       	out	0x15, r24	; 21
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 71a:	80 e0       	ldi	r24, 0x00	; 0
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
 71c:	08 95       	ret
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
 71e:	38 b3       	in	r19, 0x18	; 24
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	01 c0       	rjmp	.+2      	; 0x728 <DIO_toggle_Pin+0x56>
 726:	88 0f       	add	r24, r24
 728:	2a 95       	dec	r18
 72a:	ea f7       	brpl	.-6      	; 0x726 <DIO_toggle_Pin+0x54>
 72c:	83 27       	eor	r24, r19
 72e:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 730:	80 e0       	ldi	r24, 0x00	; 0
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
 732:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
 734:	32 b3       	in	r19, 0x12	; 18
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	01 c0       	rjmp	.+2      	; 0x73e <DIO_toggle_Pin+0x6c>
 73c:	88 0f       	add	r24, r24
 73e:	2a 95       	dec	r18
 740:	ea f7       	brpl	.-6      	; 0x73c <DIO_toggle_Pin+0x6a>
 742:	83 27       	eor	r24, r19
 744:	82 bb       	out	0x12, r24	; 18
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
 746:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
			 break;
 748:	08 95       	ret

0000074a <Timer_Init>:
		break;
		case TIMER1:
		{
			CLR_PORT(TIMER1_COUNTER_REG);
		}
		break;
 74a:	fc 01       	movw	r30, r24
 74c:	89 2b       	or	r24, r25
 74e:	81 f1       	breq	.+96     	; 0x7b0 <Timer_Init+0x66>
 750:	90 81       	ld	r25, Z
 752:	29 2f       	mov	r18, r25
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	d9 01       	movw	r26, r18
 758:	aa 57       	subi	r26, 0x7A	; 122
 75a:	bf 4f       	sbci	r27, 0xFF	; 255
 75c:	8c 91       	ld	r24, X
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	49 f0       	breq	.+18     	; 0x774 <Timer_Init+0x2a>
 762:	93 30       	cpi	r25, 0x03	; 3
 764:	30 f4       	brcc	.+12     	; 0x772 <Timer_Init+0x28>
 766:	82 81       	ldd	r24, Z+2	; 0x02
 768:	83 30       	cpi	r24, 0x03	; 3
 76a:	18 f4       	brcc	.+6      	; 0x772 <Timer_Init+0x28>
 76c:	43 81       	ldd	r20, Z+3	; 0x03
 76e:	42 30       	cpi	r20, 0x02	; 2
 770:	10 f0       	brcs	.+4      	; 0x776 <Timer_Init+0x2c>
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	08 95       	ret
 776:	51 81       	ldd	r21, Z+1	; 0x01
 778:	58 30       	cpi	r21, 0x08	; 8
 77a:	d8 f7       	brcc	.-10     	; 0x772 <Timer_Init+0x28>
 77c:	51 e0       	ldi	r21, 0x01	; 1
 77e:	5c 93       	st	X, r21
 780:	d9 01       	movw	r26, r18
 782:	a7 57       	subi	r26, 0x77	; 119
 784:	bf 4f       	sbci	r27, 0xFF	; 255
 786:	8c 93       	st	X, r24
 788:	d9 01       	movw	r26, r18
 78a:	a4 57       	subi	r26, 0x74	; 116
 78c:	bf 4f       	sbci	r27, 0xFF	; 255
 78e:	4c 93       	st	X, r20
 790:	91 30       	cpi	r25, 0x01	; 1
 792:	81 f0       	breq	.+32     	; 0x7b4 <Timer_Init+0x6a>
 794:	92 30       	cpi	r25, 0x02	; 2
 796:	d9 f4       	brne	.+54     	; 0x7ce <Timer_Init+0x84>
 798:	85 b5       	in	r24, 0x25	; 37
 79a:	88 60       	ori	r24, 0x08	; 8
 79c:	85 bd       	out	0x25, r24	; 37
 79e:	82 81       	ldd	r24, Z+2	; 0x02
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	01 f1       	breq	.+64     	; 0x7e4 <Timer_Init+0x9a>
 7a4:	83 81       	ldd	r24, Z+3	; 0x03
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	19 f4       	brne	.+6      	; 0x7b0 <Timer_Init+0x66>
 7aa:	8f b7       	in	r24, 0x3f	; 63
 7ac:	80 68       	ori	r24, 0x80	; 128
 7ae:	8f bf       	out	0x3f, r24	; 63
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	08 95       	ret
 7b4:	8f b5       	in	r24, 0x2f	; 47
 7b6:	8f bd       	out	0x2f, r24	; 47
 7b8:	8e b5       	in	r24, 0x2e	; 46
 7ba:	88 60       	ori	r24, 0x08	; 8
 7bc:	8e bd       	out	0x2e, r24	; 46
 7be:	82 81       	ldd	r24, Z+2	; 0x02
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	81 f7       	brne	.-32     	; 0x7a4 <Timer_Init+0x5a>
 7c4:	9e b5       	in	r25, 0x2e	; 46
 7c6:	81 81       	ldd	r24, Z+1	; 0x01
 7c8:	89 2b       	or	r24, r25
 7ca:	8e bd       	out	0x2e, r24	; 46
 7cc:	eb cf       	rjmp	.-42     	; 0x7a4 <Timer_Init+0x5a>
 7ce:	83 b7       	in	r24, 0x33	; 51
 7d0:	88 60       	ori	r24, 0x08	; 8
 7d2:	83 bf       	out	0x33, r24	; 51
 7d4:	82 81       	ldd	r24, Z+2	; 0x02
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	29 f7       	brne	.-54     	; 0x7a4 <Timer_Init+0x5a>
 7da:	93 b7       	in	r25, 0x33	; 51
 7dc:	81 81       	ldd	r24, Z+1	; 0x01
 7de:	89 2b       	or	r24, r25
 7e0:	83 bf       	out	0x33, r24	; 51
 7e2:	e0 cf       	rjmp	.-64     	; 0x7a4 <Timer_Init+0x5a>
 7e4:	95 b5       	in	r25, 0x25	; 37
 7e6:	81 81       	ldd	r24, Z+1	; 0x01
 7e8:	89 2b       	or	r24, r25
 7ea:	85 bd       	out	0x25, r24	; 37
 7ec:	db cf       	rjmp	.-74     	; 0x7a4 <Timer_Init+0x5a>

000007ee <Timer_Start>:
 7ee:	81 30       	cpi	r24, 0x01	; 1
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <Timer_Start+0x6>
 7f2:	44 c0       	rjmp	.+136    	; 0x87c <__stack+0x1d>
 7f4:	20 f1       	brcs	.+72     	; 0x83e <Timer_Start+0x50>
 7f6:	82 30       	cpi	r24, 0x02	; 2
 7f8:	01 f5       	brne	.+64     	; 0x83a <Timer_Start+0x4c>
 7fa:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <sgau8_TIMERMode+0x2>
 7fe:	81 30       	cpi	r24, 0x01	; 1
 800:	09 f4       	brne	.+2      	; 0x804 <Timer_Start+0x16>
 802:	ce c0       	rjmp	.+412    	; 0x9a0 <__stack+0x141>
 804:	81 11       	cpse	r24, r1
 806:	a5 c0       	rjmp	.+330    	; 0x952 <__stack+0xf3>
 808:	95 b5       	in	r25, 0x25	; 37
 80a:	92 60       	ori	r25, 0x02	; 2
 80c:	95 bd       	out	0x25, r25	; 37
 80e:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <sgau8_Interrupt_Mode+0x2>
 812:	91 11       	cpse	r25, r1
 814:	d0 c0       	rjmp	.+416    	; 0x9b6 <__stack+0x157>
 816:	61 15       	cp	r22, r1
 818:	71 05       	cpc	r23, r1
 81a:	69 f0       	breq	.+26     	; 0x836 <Timer_Start+0x48>
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	30 e8       	ldi	r19, 0x80	; 128
 822:	21 e0       	ldi	r18, 0x01	; 1
 824:	38 bf       	out	0x38, r19	; 56
 826:	23 bd       	out	0x23, r18	; 35
 828:	08 b6       	in	r0, 0x38	; 56
 82a:	07 fe       	sbrs	r0, 7
 82c:	fd cf       	rjmp	.-6      	; 0x828 <Timer_Start+0x3a>
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	68 17       	cp	r22, r24
 832:	79 07       	cpc	r23, r25
 834:	b9 f7       	brne	.-18     	; 0x824 <Timer_Start+0x36>
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	08 95       	ret
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	08 95       	ret
 83e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <sgau8_TIMERMode>
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	09 f4       	brne	.+2      	; 0x848 <Timer_Start+0x5a>
 846:	a1 c0       	rjmp	.+322    	; 0x98a <__stack+0x12b>
 848:	81 11       	cpse	r24, r1
 84a:	67 c0       	rjmp	.+206    	; 0x91a <__stack+0xbb>
 84c:	93 b7       	in	r25, 0x33	; 51
 84e:	92 60       	ori	r25, 0x02	; 2
 850:	93 bf       	out	0x33, r25	; 51
 852:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <sgau8_Interrupt_Mode>
 856:	91 11       	cpse	r25, r1
 858:	bc c0       	rjmp	.+376    	; 0x9d2 <__stack+0x173>
 85a:	61 15       	cp	r22, r1
 85c:	71 05       	cpc	r23, r1
 85e:	59 f3       	breq	.-42     	; 0x836 <Timer_Start+0x48>
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	32 e0       	ldi	r19, 0x02	; 2
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	38 bf       	out	0x38, r19	; 56
 86a:	2c bf       	out	0x3c, r18	; 60
 86c:	08 b6       	in	r0, 0x38	; 56
 86e:	01 fe       	sbrs	r0, 1
 870:	fd cf       	rjmp	.-6      	; 0x86c <__stack+0xd>
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	68 17       	cp	r22, r24
 876:	79 07       	cpc	r23, r25
 878:	b9 f7       	brne	.-18     	; 0x868 <__stack+0x9>
 87a:	dd cf       	rjmp	.-70     	; 0x836 <Timer_Start+0x48>
 87c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <sgau8_TIMERMode+0x1>
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	e1 f0       	breq	.+56     	; 0x8bc <__stack+0x5d>
 884:	81 11       	cpse	r24, r1
 886:	2b c0       	rjmp	.+86     	; 0x8de <__stack+0x7f>
 888:	9e b5       	in	r25, 0x2e	; 46
 88a:	92 60       	ori	r25, 0x02	; 2
 88c:	9e bd       	out	0x2e, r25	; 46
 88e:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <sgau8_Interrupt_Mode+0x1>
 892:	91 11       	cpse	r25, r1
 894:	ac c0       	rjmp	.+344    	; 0x9ee <__stack+0x18f>
 896:	61 15       	cp	r22, r1
 898:	71 05       	cpc	r23, r1
 89a:	69 f2       	breq	.-102    	; 0x836 <Timer_Start+0x48>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	40 e1       	ldi	r20, 0x10	; 16
 8a2:	21 e0       	ldi	r18, 0x01	; 1
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	48 bf       	out	0x38, r20	; 56
 8a8:	3b bd       	out	0x2b, r19	; 43
 8aa:	2a bd       	out	0x2a, r18	; 42
 8ac:	08 b6       	in	r0, 0x38	; 56
 8ae:	04 fe       	sbrs	r0, 4
 8b0:	fd cf       	rjmp	.-6      	; 0x8ac <__stack+0x4d>
 8b2:	01 96       	adiw	r24, 0x01	; 1
 8b4:	68 17       	cp	r22, r24
 8b6:	79 07       	cpc	r23, r25
 8b8:	b1 f7       	brne	.-20     	; 0x8a6 <__stack+0x47>
 8ba:	bd cf       	rjmp	.-134    	; 0x836 <Timer_Start+0x48>
 8bc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <sgau8_TIMERMode>
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__stack+0x67>
 8c4:	b8 cf       	rjmp	.-144    	; 0x836 <Timer_Start+0x48>
 8c6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <sgau8_Interrupt_Mode>
 8ca:	81 11       	cpse	r24, r1
 8cc:	df c0       	rjmp	.+446    	; 0xa8c <__stack+0x22d>
 8ce:	80 e1       	ldi	r24, 0x10	; 16
 8d0:	88 bf       	out	0x38, r24	; 56
 8d2:	7b bd       	out	0x2b, r23	; 43
 8d4:	6a bd       	out	0x2a, r22	; 42
 8d6:	08 b6       	in	r0, 0x38	; 56
 8d8:	01 fe       	sbrs	r0, 1
 8da:	fd cf       	rjmp	.-6      	; 0x8d6 <__stack+0x77>
 8dc:	ac cf       	rjmp	.-168    	; 0x836 <Timer_Start+0x48>
 8de:	82 30       	cpi	r24, 0x02	; 2
 8e0:	09 f0       	breq	.+2      	; 0x8e4 <__stack+0x85>
 8e2:	a9 cf       	rjmp	.-174    	; 0x836 <Timer_Start+0x48>
 8e4:	8e b5       	in	r24, 0x2e	; 46
 8e6:	83 60       	ori	r24, 0x03	; 3
 8e8:	8e bd       	out	0x2e, r24	; 46
 8ea:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <sgau8_Interrupt_Mode+0x1>
 8ee:	81 11       	cpse	r24, r1
 8f0:	8f c0       	rjmp	.+286    	; 0xa10 <__stack+0x1b1>
 8f2:	61 15       	cp	r22, r1
 8f4:	71 05       	cpc	r23, r1
 8f6:	09 f4       	brne	.+2      	; 0x8fa <__stack+0x9b>
 8f8:	9e cf       	rjmp	.-196    	; 0x836 <Timer_Start+0x48>
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	40 e1       	ldi	r20, 0x10	; 16
 900:	2d e7       	ldi	r18, 0x7D	; 125
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	48 bf       	out	0x38, r20	; 56
 906:	3b bd       	out	0x2b, r19	; 43
 908:	2a bd       	out	0x2a, r18	; 42
 90a:	08 b6       	in	r0, 0x38	; 56
 90c:	04 fe       	sbrs	r0, 4
 90e:	fd cf       	rjmp	.-6      	; 0x90a <__stack+0xab>
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	68 17       	cp	r22, r24
 914:	79 07       	cpc	r23, r25
 916:	b1 f7       	brne	.-20     	; 0x904 <__stack+0xa5>
 918:	8e cf       	rjmp	.-228    	; 0x836 <Timer_Start+0x48>
 91a:	82 30       	cpi	r24, 0x02	; 2
 91c:	09 f0       	breq	.+2      	; 0x920 <__stack+0xc1>
 91e:	8b cf       	rjmp	.-234    	; 0x836 <Timer_Start+0x48>
 920:	93 b7       	in	r25, 0x33	; 51
 922:	93 60       	ori	r25, 0x03	; 3
 924:	93 bf       	out	0x33, r25	; 51
 926:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <sgau8_Interrupt_Mode>
 92a:	91 11       	cpse	r25, r1
 92c:	83 c0       	rjmp	.+262    	; 0xa34 <__stack+0x1d5>
 92e:	61 15       	cp	r22, r1
 930:	71 05       	cpc	r23, r1
 932:	09 f4       	brne	.+2      	; 0x936 <__stack+0xd7>
 934:	80 cf       	rjmp	.-256    	; 0x836 <Timer_Start+0x48>
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	32 e0       	ldi	r19, 0x02	; 2
 93c:	2d e7       	ldi	r18, 0x7D	; 125
 93e:	38 bf       	out	0x38, r19	; 56
 940:	2c bf       	out	0x3c, r18	; 60
 942:	08 b6       	in	r0, 0x38	; 56
 944:	01 fe       	sbrs	r0, 1
 946:	fd cf       	rjmp	.-6      	; 0x942 <__stack+0xe3>
 948:	01 96       	adiw	r24, 0x01	; 1
 94a:	68 17       	cp	r22, r24
 94c:	79 07       	cpc	r23, r25
 94e:	b9 f7       	brne	.-18     	; 0x93e <__stack+0xdf>
 950:	72 cf       	rjmp	.-284    	; 0x836 <Timer_Start+0x48>
 952:	82 30       	cpi	r24, 0x02	; 2
 954:	09 f0       	breq	.+2      	; 0x958 <__stack+0xf9>
 956:	6f cf       	rjmp	.-290    	; 0x836 <Timer_Start+0x48>
 958:	85 b5       	in	r24, 0x25	; 37
 95a:	84 60       	ori	r24, 0x04	; 4
 95c:	85 bd       	out	0x25, r24	; 37
 95e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sgau8_Interrupt_Mode+0x2>
 962:	81 11       	cpse	r24, r1
 964:	76 c0       	rjmp	.+236    	; 0xa52 <__stack+0x1f3>
 966:	61 15       	cp	r22, r1
 968:	71 05       	cpc	r23, r1
 96a:	09 f4       	brne	.+2      	; 0x96e <__stack+0x10f>
 96c:	64 cf       	rjmp	.-312    	; 0x836 <Timer_Start+0x48>
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	30 e8       	ldi	r19, 0x80	; 128
 974:	2d e7       	ldi	r18, 0x7D	; 125
 976:	38 bf       	out	0x38, r19	; 56
 978:	23 bd       	out	0x23, r18	; 35
 97a:	08 b6       	in	r0, 0x38	; 56
 97c:	07 fe       	sbrs	r0, 7
 97e:	fd cf       	rjmp	.-6      	; 0x97a <__stack+0x11b>
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	68 17       	cp	r22, r24
 984:	79 07       	cpc	r23, r25
 986:	b9 f7       	brne	.-18     	; 0x976 <__stack+0x117>
 988:	56 cf       	rjmp	.-340    	; 0x836 <Timer_Start+0x48>
 98a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <sgau8_Interrupt_Mode>
 98e:	81 11       	cpse	r24, r1
 990:	76 c0       	rjmp	.+236    	; 0xa7e <__stack+0x21f>
 992:	82 e0       	ldi	r24, 0x02	; 2
 994:	88 bf       	out	0x38, r24	; 56
 996:	6c bf       	out	0x3c, r22	; 60
 998:	08 b6       	in	r0, 0x38	; 56
 99a:	01 fe       	sbrs	r0, 1
 99c:	fd cf       	rjmp	.-6      	; 0x998 <__stack+0x139>
 99e:	4b cf       	rjmp	.-362    	; 0x836 <Timer_Start+0x48>
 9a0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <sgau8_Interrupt_Mode+0x2>
 9a4:	81 11       	cpse	r24, r1
 9a6:	64 c0       	rjmp	.+200    	; 0xa70 <__stack+0x211>
 9a8:	80 e8       	ldi	r24, 0x80	; 128
 9aa:	88 bf       	out	0x38, r24	; 56
 9ac:	63 bd       	out	0x23, r22	; 35
 9ae:	08 b6       	in	r0, 0x38	; 56
 9b0:	07 fe       	sbrs	r0, 7
 9b2:	fd cf       	rjmp	.-6      	; 0x9ae <__stack+0x14f>
 9b4:	40 cf       	rjmp	.-384    	; 0x836 <Timer_Start+0x48>
 9b6:	91 30       	cpi	r25, 0x01	; 1
 9b8:	09 f0       	breq	.+2      	; 0x9bc <__stack+0x15d>
 9ba:	3d cf       	rjmp	.-390    	; 0x836 <Timer_Start+0x48>
 9bc:	20 e8       	ldi	r18, 0x80	; 128
 9be:	28 bf       	out	0x38, r18	; 56
 9c0:	93 bd       	out	0x23, r25	; 35
 9c2:	99 b7       	in	r25, 0x39	; 57
 9c4:	90 68       	ori	r25, 0x80	; 128
 9c6:	99 bf       	out	0x39, r25	; 57
 9c8:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <sgpfun_TIMER2_CMP_ISR_Function+0x1>
 9cc:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <sgpfun_TIMER2_CMP_ISR_Function>
 9d0:	08 95       	ret
 9d2:	91 30       	cpi	r25, 0x01	; 1
 9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0x179>
 9d6:	2f cf       	rjmp	.-418    	; 0x836 <Timer_Start+0x48>
 9d8:	22 e0       	ldi	r18, 0x02	; 2
 9da:	28 bf       	out	0x38, r18	; 56
 9dc:	9c bf       	out	0x3c, r25	; 60
 9de:	99 b7       	in	r25, 0x39	; 57
 9e0:	92 60       	ori	r25, 0x02	; 2
 9e2:	99 bf       	out	0x39, r25	; 57
 9e4:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 9e8:	40 93 84 00 	sts	0x0084, r20	; 0x800084 <sgpfun_TIMER0_CMP_ISR_Function>
 9ec:	08 95       	ret
 9ee:	91 30       	cpi	r25, 0x01	; 1
 9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0x195>
 9f2:	21 cf       	rjmp	.-446    	; 0x836 <Timer_Start+0x48>
 9f4:	90 e1       	ldi	r25, 0x10	; 16
 9f6:	98 bf       	out	0x38, r25	; 56
 9f8:	21 e0       	ldi	r18, 0x01	; 1
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	3b bd       	out	0x2b, r19	; 43
 9fe:	2a bd       	out	0x2a, r18	; 42
 a00:	99 b7       	in	r25, 0x39	; 57
 a02:	90 61       	ori	r25, 0x10	; 16
 a04:	99 bf       	out	0x39, r25	; 57
 a06:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
 a0a:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <sgpfun_TIMER1_CMPA_ISR_Function>
 a0e:	08 95       	ret
 a10:	81 30       	cpi	r24, 0x01	; 1
 a12:	09 f0       	breq	.+2      	; 0xa16 <__stack+0x1b7>
 a14:	10 cf       	rjmp	.-480    	; 0x836 <Timer_Start+0x48>
 a16:	80 e1       	ldi	r24, 0x10	; 16
 a18:	88 bf       	out	0x38, r24	; 56
 a1a:	8d e7       	ldi	r24, 0x7D	; 125
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	9b bd       	out	0x2b, r25	; 43
 a20:	8a bd       	out	0x2a, r24	; 42
 a22:	89 b7       	in	r24, 0x39	; 57
 a24:	80 61       	ori	r24, 0x10	; 16
 a26:	89 bf       	out	0x39, r24	; 57
 a28:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
 a2c:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <sgpfun_TIMER1_CMPA_ISR_Function>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	08 95       	ret
 a34:	91 30       	cpi	r25, 0x01	; 1
 a36:	09 f0       	breq	.+2      	; 0xa3a <__stack+0x1db>
 a38:	fe ce       	rjmp	.-516    	; 0x836 <Timer_Start+0x48>
 a3a:	88 bf       	out	0x38, r24	; 56
 a3c:	8d e7       	ldi	r24, 0x7D	; 125
 a3e:	8c bf       	out	0x3c, r24	; 60
 a40:	89 b7       	in	r24, 0x39	; 57
 a42:	82 60       	ori	r24, 0x02	; 2
 a44:	89 bf       	out	0x39, r24	; 57
 a46:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 a4a:	40 93 84 00 	sts	0x0084, r20	; 0x800084 <sgpfun_TIMER0_CMP_ISR_Function>
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	08 95       	ret
 a52:	81 30       	cpi	r24, 0x01	; 1
 a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x1f9>
 a56:	ef ce       	rjmp	.-546    	; 0x836 <Timer_Start+0x48>
 a58:	80 e8       	ldi	r24, 0x80	; 128
 a5a:	88 bf       	out	0x38, r24	; 56
 a5c:	8d e7       	ldi	r24, 0x7D	; 125
 a5e:	83 bd       	out	0x23, r24	; 35
 a60:	89 b7       	in	r24, 0x39	; 57
 a62:	80 68       	ori	r24, 0x80	; 128
 a64:	89 bf       	out	0x39, r24	; 57
 a66:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <sgpfun_TIMER2_CMP_ISR_Function+0x1>
 a6a:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <sgpfun_TIMER2_CMP_ISR_Function>
 a6e:	e3 ce       	rjmp	.-570    	; 0x836 <Timer_Start+0x48>
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	09 f0       	breq	.+2      	; 0xa76 <__stack+0x217>
 a74:	e0 ce       	rjmp	.-576    	; 0x836 <Timer_Start+0x48>
 a76:	80 e8       	ldi	r24, 0x80	; 128
 a78:	88 bf       	out	0x38, r24	; 56
 a7a:	63 bd       	out	0x23, r22	; 35
 a7c:	f1 cf       	rjmp	.-30     	; 0xa60 <__stack+0x201>
 a7e:	81 30       	cpi	r24, 0x01	; 1
 a80:	09 f0       	breq	.+2      	; 0xa84 <__stack+0x225>
 a82:	d9 ce       	rjmp	.-590    	; 0x836 <Timer_Start+0x48>
 a84:	82 e0       	ldi	r24, 0x02	; 2
 a86:	88 bf       	out	0x38, r24	; 56
 a88:	6c bf       	out	0x3c, r22	; 60
 a8a:	da cf       	rjmp	.-76     	; 0xa40 <__stack+0x1e1>
 a8c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <sgau8_Interrupt_Mode+0x1>
 a90:	81 30       	cpi	r24, 0x01	; 1
 a92:	09 f0       	breq	.+2      	; 0xa96 <__stack+0x237>
 a94:	d0 ce       	rjmp	.-608    	; 0x836 <Timer_Start+0x48>
 a96:	80 e1       	ldi	r24, 0x10	; 16
 a98:	88 bf       	out	0x38, r24	; 56
 a9a:	7b bd       	out	0x2b, r23	; 43
 a9c:	6a bd       	out	0x2a, r22	; 42
 a9e:	c1 cf       	rjmp	.-126    	; 0xa22 <__stack+0x1c3>

00000aa0 <__vector_10>:
	
	return TIMER_ERROR_OK;
}

Timer_ISR(TIMER0_COMP_VECTOR)
{
 aa0:	1f 92       	push	r1
 aa2:	0f 92       	push	r0
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	0f 92       	push	r0
 aa8:	11 24       	eor	r1, r1
 aaa:	2f 93       	push	r18
 aac:	3f 93       	push	r19
 aae:	4f 93       	push	r20
 ab0:	5f 93       	push	r21
 ab2:	6f 93       	push	r22
 ab4:	7f 93       	push	r23
 ab6:	8f 93       	push	r24
 ab8:	9f 93       	push	r25
 aba:	af 93       	push	r26
 abc:	bf 93       	push	r27
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
 ac2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <sgpfun_TIMER0_CMP_ISR_Function>
 ac6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 aca:	09 95       	icall
}
 acc:	ff 91       	pop	r31
 ace:	ef 91       	pop	r30
 ad0:	bf 91       	pop	r27
 ad2:	af 91       	pop	r26
 ad4:	9f 91       	pop	r25
 ad6:	8f 91       	pop	r24
 ad8:	7f 91       	pop	r23
 ada:	6f 91       	pop	r22
 adc:	5f 91       	pop	r21
 ade:	4f 91       	pop	r20
 ae0:	3f 91       	pop	r19
 ae2:	2f 91       	pop	r18
 ae4:	0f 90       	pop	r0
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	0f 90       	pop	r0
 aea:	1f 90       	pop	r1
 aec:	18 95       	reti

00000aee <__vector_7>:

Timer_ISR(TIMER1_COMPA_VECTOR)
{
 aee:	1f 92       	push	r1
 af0:	0f 92       	push	r0
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	0f 92       	push	r0
 af6:	11 24       	eor	r1, r1
 af8:	2f 93       	push	r18
 afa:	3f 93       	push	r19
 afc:	4f 93       	push	r20
 afe:	5f 93       	push	r21
 b00:	6f 93       	push	r22
 b02:	7f 93       	push	r23
 b04:	8f 93       	push	r24
 b06:	9f 93       	push	r25
 b08:	af 93       	push	r26
 b0a:	bf 93       	push	r27
 b0c:	ef 93       	push	r30
 b0e:	ff 93       	push	r31
	sgpfun_TIMER1_CMPA_ISR_Function();
 b10:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <sgpfun_TIMER1_CMPA_ISR_Function>
 b14:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
 b18:	09 95       	icall
}
 b1a:	ff 91       	pop	r31
 b1c:	ef 91       	pop	r30
 b1e:	bf 91       	pop	r27
 b20:	af 91       	pop	r26
 b22:	9f 91       	pop	r25
 b24:	8f 91       	pop	r24
 b26:	7f 91       	pop	r23
 b28:	6f 91       	pop	r22
 b2a:	5f 91       	pop	r21
 b2c:	4f 91       	pop	r20
 b2e:	3f 91       	pop	r19
 b30:	2f 91       	pop	r18
 b32:	0f 90       	pop	r0
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	0f 90       	pop	r0
 b38:	1f 90       	pop	r1
 b3a:	18 95       	reti

00000b3c <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
 b3c:	1f 92       	push	r1
 b3e:	0f 92       	push	r0
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	0f 92       	push	r0
 b44:	11 24       	eor	r1, r1
 b46:	2f 93       	push	r18
 b48:	3f 93       	push	r19
 b4a:	4f 93       	push	r20
 b4c:	5f 93       	push	r21
 b4e:	6f 93       	push	r22
 b50:	7f 93       	push	r23
 b52:	8f 93       	push	r24
 b54:	9f 93       	push	r25
 b56:	af 93       	push	r26
 b58:	bf 93       	push	r27
 b5a:	ef 93       	push	r30
 b5c:	ff 93       	push	r31
	sgpfun_TIMER1_CMPB_ISR_Function();
 b5e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <sgpfun_TIMER1_CMPB_ISR_Function>
 b62:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <sgpfun_TIMER1_CMPB_ISR_Function+0x1>
 b66:	09 95       	icall
}
 b68:	ff 91       	pop	r31
 b6a:	ef 91       	pop	r30
 b6c:	bf 91       	pop	r27
 b6e:	af 91       	pop	r26
 b70:	9f 91       	pop	r25
 b72:	8f 91       	pop	r24
 b74:	7f 91       	pop	r23
 b76:	6f 91       	pop	r22
 b78:	5f 91       	pop	r21
 b7a:	4f 91       	pop	r20
 b7c:	3f 91       	pop	r19
 b7e:	2f 91       	pop	r18
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <__vector_4>:

Timer_ISR(TIMER2_COMP_VECTOR)
{
 b8a:	1f 92       	push	r1
 b8c:	0f 92       	push	r0
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	0f 92       	push	r0
 b92:	11 24       	eor	r1, r1
 b94:	2f 93       	push	r18
 b96:	3f 93       	push	r19
 b98:	4f 93       	push	r20
 b9a:	5f 93       	push	r21
 b9c:	6f 93       	push	r22
 b9e:	7f 93       	push	r23
 ba0:	8f 93       	push	r24
 ba2:	9f 93       	push	r25
 ba4:	af 93       	push	r26
 ba6:	bf 93       	push	r27
 ba8:	ef 93       	push	r30
 baa:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
 bac:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <sgpfun_TIMER2_CMP_ISR_Function>
 bb0:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <sgpfun_TIMER2_CMP_ISR_Function+0x1>
 bb4:	09 95       	icall
	TIMER_CLR_INT_FLAG(TIMER2_Compare_FLAG_BIT);	
 bb6:	80 e8       	ldi	r24, 0x80	; 128
 bb8:	88 bf       	out	0x38, r24	; 56
 bba:	ff 91       	pop	r31
 bbc:	ef 91       	pop	r30
 bbe:	bf 91       	pop	r27
 bc0:	af 91       	pop	r26
 bc2:	9f 91       	pop	r25
 bc4:	8f 91       	pop	r24
 bc6:	7f 91       	pop	r23
 bc8:	6f 91       	pop	r22
 bca:	5f 91       	pop	r21
 bcc:	4f 91       	pop	r20
 bce:	3f 91       	pop	r19
 bd0:	2f 91       	pop	r18
 bd2:	0f 90       	pop	r0
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	0f 90       	pop	r0
 bd8:	1f 90       	pop	r1
 bda:	18 95       	reti

00000bdc <__divsf3>:
 bdc:	0e 94 02 06 	call	0xc04	; 0xc04 <__divsf3x>
 be0:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_round>
 be4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_pscB>
 be8:	58 f0       	brcs	.+22     	; 0xc00 <__divsf3+0x24>
 bea:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_pscA>
 bee:	40 f0       	brcs	.+16     	; 0xc00 <__divsf3+0x24>
 bf0:	29 f4       	brne	.+10     	; 0xbfc <__divsf3+0x20>
 bf2:	5f 3f       	cpi	r21, 0xFF	; 255
 bf4:	29 f0       	breq	.+10     	; 0xc00 <__divsf3+0x24>
 bf6:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_inf>
 bfa:	51 11       	cpse	r21, r1
 bfc:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>
 c00:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__fp_nan>

00000c04 <__divsf3x>:
 c04:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_split3>
 c08:	68 f3       	brcs	.-38     	; 0xbe4 <__divsf3+0x8>

00000c0a <__divsf3_pse>:
 c0a:	99 23       	and	r25, r25
 c0c:	b1 f3       	breq	.-20     	; 0xbfa <__divsf3+0x1e>
 c0e:	55 23       	and	r21, r21
 c10:	91 f3       	breq	.-28     	; 0xbf6 <__divsf3+0x1a>
 c12:	95 1b       	sub	r25, r21
 c14:	55 0b       	sbc	r21, r21
 c16:	bb 27       	eor	r27, r27
 c18:	aa 27       	eor	r26, r26
 c1a:	62 17       	cp	r22, r18
 c1c:	73 07       	cpc	r23, r19
 c1e:	84 07       	cpc	r24, r20
 c20:	38 f0       	brcs	.+14     	; 0xc30 <__divsf3_pse+0x26>
 c22:	9f 5f       	subi	r25, 0xFF	; 255
 c24:	5f 4f       	sbci	r21, 0xFF	; 255
 c26:	22 0f       	add	r18, r18
 c28:	33 1f       	adc	r19, r19
 c2a:	44 1f       	adc	r20, r20
 c2c:	aa 1f       	adc	r26, r26
 c2e:	a9 f3       	breq	.-22     	; 0xc1a <__divsf3_pse+0x10>
 c30:	35 d0       	rcall	.+106    	; 0xc9c <__divsf3_pse+0x92>
 c32:	0e 2e       	mov	r0, r30
 c34:	3a f0       	brmi	.+14     	; 0xc44 <__divsf3_pse+0x3a>
 c36:	e0 e8       	ldi	r30, 0x80	; 128
 c38:	32 d0       	rcall	.+100    	; 0xc9e <__divsf3_pse+0x94>
 c3a:	91 50       	subi	r25, 0x01	; 1
 c3c:	50 40       	sbci	r21, 0x00	; 0
 c3e:	e6 95       	lsr	r30
 c40:	00 1c       	adc	r0, r0
 c42:	ca f7       	brpl	.-14     	; 0xc36 <__divsf3_pse+0x2c>
 c44:	2b d0       	rcall	.+86     	; 0xc9c <__divsf3_pse+0x92>
 c46:	fe 2f       	mov	r31, r30
 c48:	29 d0       	rcall	.+82     	; 0xc9c <__divsf3_pse+0x92>
 c4a:	66 0f       	add	r22, r22
 c4c:	77 1f       	adc	r23, r23
 c4e:	88 1f       	adc	r24, r24
 c50:	bb 1f       	adc	r27, r27
 c52:	26 17       	cp	r18, r22
 c54:	37 07       	cpc	r19, r23
 c56:	48 07       	cpc	r20, r24
 c58:	ab 07       	cpc	r26, r27
 c5a:	b0 e8       	ldi	r27, 0x80	; 128
 c5c:	09 f0       	breq	.+2      	; 0xc60 <__divsf3_pse+0x56>
 c5e:	bb 0b       	sbc	r27, r27
 c60:	80 2d       	mov	r24, r0
 c62:	bf 01       	movw	r22, r30
 c64:	ff 27       	eor	r31, r31
 c66:	93 58       	subi	r25, 0x83	; 131
 c68:	5f 4f       	sbci	r21, 0xFF	; 255
 c6a:	3a f0       	brmi	.+14     	; 0xc7a <__divsf3_pse+0x70>
 c6c:	9e 3f       	cpi	r25, 0xFE	; 254
 c6e:	51 05       	cpc	r21, r1
 c70:	78 f0       	brcs	.+30     	; 0xc90 <__divsf3_pse+0x86>
 c72:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_inf>
 c76:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>
 c7a:	5f 3f       	cpi	r21, 0xFF	; 255
 c7c:	e4 f3       	brlt	.-8      	; 0xc76 <__divsf3_pse+0x6c>
 c7e:	98 3e       	cpi	r25, 0xE8	; 232
 c80:	d4 f3       	brlt	.-12     	; 0xc76 <__divsf3_pse+0x6c>
 c82:	86 95       	lsr	r24
 c84:	77 95       	ror	r23
 c86:	67 95       	ror	r22
 c88:	b7 95       	ror	r27
 c8a:	f7 95       	ror	r31
 c8c:	9f 5f       	subi	r25, 0xFF	; 255
 c8e:	c9 f7       	brne	.-14     	; 0xc82 <__divsf3_pse+0x78>
 c90:	88 0f       	add	r24, r24
 c92:	91 1d       	adc	r25, r1
 c94:	96 95       	lsr	r25
 c96:	87 95       	ror	r24
 c98:	97 f9       	bld	r25, 7
 c9a:	08 95       	ret
 c9c:	e1 e0       	ldi	r30, 0x01	; 1
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	bb 1f       	adc	r27, r27
 ca6:	62 17       	cp	r22, r18
 ca8:	73 07       	cpc	r23, r19
 caa:	84 07       	cpc	r24, r20
 cac:	ba 07       	cpc	r27, r26
 cae:	20 f0       	brcs	.+8      	; 0xcb8 <__divsf3_pse+0xae>
 cb0:	62 1b       	sub	r22, r18
 cb2:	73 0b       	sbc	r23, r19
 cb4:	84 0b       	sbc	r24, r20
 cb6:	ba 0b       	sbc	r27, r26
 cb8:	ee 1f       	adc	r30, r30
 cba:	88 f7       	brcc	.-30     	; 0xc9e <__divsf3_pse+0x94>
 cbc:	e0 95       	com	r30
 cbe:	08 95       	ret

00000cc0 <__fixunssfsi>:
 cc0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_splitA>
 cc4:	88 f0       	brcs	.+34     	; 0xce8 <__fixunssfsi+0x28>
 cc6:	9f 57       	subi	r25, 0x7F	; 127
 cc8:	98 f0       	brcs	.+38     	; 0xcf0 <__fixunssfsi+0x30>
 cca:	b9 2f       	mov	r27, r25
 ccc:	99 27       	eor	r25, r25
 cce:	b7 51       	subi	r27, 0x17	; 23
 cd0:	b0 f0       	brcs	.+44     	; 0xcfe <__fixunssfsi+0x3e>
 cd2:	e1 f0       	breq	.+56     	; 0xd0c <__fixunssfsi+0x4c>
 cd4:	66 0f       	add	r22, r22
 cd6:	77 1f       	adc	r23, r23
 cd8:	88 1f       	adc	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	1a f0       	brmi	.+6      	; 0xce4 <__fixunssfsi+0x24>
 cde:	ba 95       	dec	r27
 ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__fixunssfsi+0x14>
 ce2:	14 c0       	rjmp	.+40     	; 0xd0c <__fixunssfsi+0x4c>
 ce4:	b1 30       	cpi	r27, 0x01	; 1
 ce6:	91 f0       	breq	.+36     	; 0xd0c <__fixunssfsi+0x4c>
 ce8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_zero>
 cec:	b1 e0       	ldi	r27, 0x01	; 1
 cee:	08 95       	ret
 cf0:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_zero>
 cf4:	67 2f       	mov	r22, r23
 cf6:	78 2f       	mov	r23, r24
 cf8:	88 27       	eor	r24, r24
 cfa:	b8 5f       	subi	r27, 0xF8	; 248
 cfc:	39 f0       	breq	.+14     	; 0xd0c <__fixunssfsi+0x4c>
 cfe:	b9 3f       	cpi	r27, 0xF9	; 249
 d00:	cc f3       	brlt	.-14     	; 0xcf4 <__fixunssfsi+0x34>
 d02:	86 95       	lsr	r24
 d04:	77 95       	ror	r23
 d06:	67 95       	ror	r22
 d08:	b3 95       	inc	r27
 d0a:	d9 f7       	brne	.-10     	; 0xd02 <__fixunssfsi+0x42>
 d0c:	3e f4       	brtc	.+14     	; 0xd1c <__fixunssfsi+0x5c>
 d0e:	90 95       	com	r25
 d10:	80 95       	com	r24
 d12:	70 95       	com	r23
 d14:	61 95       	neg	r22
 d16:	7f 4f       	sbci	r23, 0xFF	; 255
 d18:	8f 4f       	sbci	r24, 0xFF	; 255
 d1a:	9f 4f       	sbci	r25, 0xFF	; 255
 d1c:	08 95       	ret

00000d1e <__floatunsisf>:
 d1e:	e8 94       	clt
 d20:	09 c0       	rjmp	.+18     	; 0xd34 <__floatsisf+0x12>

00000d22 <__floatsisf>:
 d22:	97 fb       	bst	r25, 7
 d24:	3e f4       	brtc	.+14     	; 0xd34 <__floatsisf+0x12>
 d26:	90 95       	com	r25
 d28:	80 95       	com	r24
 d2a:	70 95       	com	r23
 d2c:	61 95       	neg	r22
 d2e:	7f 4f       	sbci	r23, 0xFF	; 255
 d30:	8f 4f       	sbci	r24, 0xFF	; 255
 d32:	9f 4f       	sbci	r25, 0xFF	; 255
 d34:	99 23       	and	r25, r25
 d36:	a9 f0       	breq	.+42     	; 0xd62 <__floatsisf+0x40>
 d38:	f9 2f       	mov	r31, r25
 d3a:	96 e9       	ldi	r25, 0x96	; 150
 d3c:	bb 27       	eor	r27, r27
 d3e:	93 95       	inc	r25
 d40:	f6 95       	lsr	r31
 d42:	87 95       	ror	r24
 d44:	77 95       	ror	r23
 d46:	67 95       	ror	r22
 d48:	b7 95       	ror	r27
 d4a:	f1 11       	cpse	r31, r1
 d4c:	f8 cf       	rjmp	.-16     	; 0xd3e <__floatsisf+0x1c>
 d4e:	fa f4       	brpl	.+62     	; 0xd8e <__floatsisf+0x6c>
 d50:	bb 0f       	add	r27, r27
 d52:	11 f4       	brne	.+4      	; 0xd58 <__floatsisf+0x36>
 d54:	60 ff       	sbrs	r22, 0
 d56:	1b c0       	rjmp	.+54     	; 0xd8e <__floatsisf+0x6c>
 d58:	6f 5f       	subi	r22, 0xFF	; 255
 d5a:	7f 4f       	sbci	r23, 0xFF	; 255
 d5c:	8f 4f       	sbci	r24, 0xFF	; 255
 d5e:	9f 4f       	sbci	r25, 0xFF	; 255
 d60:	16 c0       	rjmp	.+44     	; 0xd8e <__floatsisf+0x6c>
 d62:	88 23       	and	r24, r24
 d64:	11 f0       	breq	.+4      	; 0xd6a <__floatsisf+0x48>
 d66:	96 e9       	ldi	r25, 0x96	; 150
 d68:	11 c0       	rjmp	.+34     	; 0xd8c <__floatsisf+0x6a>
 d6a:	77 23       	and	r23, r23
 d6c:	21 f0       	breq	.+8      	; 0xd76 <__floatsisf+0x54>
 d6e:	9e e8       	ldi	r25, 0x8E	; 142
 d70:	87 2f       	mov	r24, r23
 d72:	76 2f       	mov	r23, r22
 d74:	05 c0       	rjmp	.+10     	; 0xd80 <__floatsisf+0x5e>
 d76:	66 23       	and	r22, r22
 d78:	71 f0       	breq	.+28     	; 0xd96 <__floatsisf+0x74>
 d7a:	96 e8       	ldi	r25, 0x86	; 134
 d7c:	86 2f       	mov	r24, r22
 d7e:	70 e0       	ldi	r23, 0x00	; 0
 d80:	60 e0       	ldi	r22, 0x00	; 0
 d82:	2a f0       	brmi	.+10     	; 0xd8e <__floatsisf+0x6c>
 d84:	9a 95       	dec	r25
 d86:	66 0f       	add	r22, r22
 d88:	77 1f       	adc	r23, r23
 d8a:	88 1f       	adc	r24, r24
 d8c:	da f7       	brpl	.-10     	; 0xd84 <__floatsisf+0x62>
 d8e:	88 0f       	add	r24, r24
 d90:	96 95       	lsr	r25
 d92:	87 95       	ror	r24
 d94:	97 f9       	bld	r25, 7
 d96:	08 95       	ret

00000d98 <__fp_inf>:
 d98:	97 f9       	bld	r25, 7
 d9a:	9f 67       	ori	r25, 0x7F	; 127
 d9c:	80 e8       	ldi	r24, 0x80	; 128
 d9e:	70 e0       	ldi	r23, 0x00	; 0
 da0:	60 e0       	ldi	r22, 0x00	; 0
 da2:	08 95       	ret

00000da4 <__fp_nan>:
 da4:	9f ef       	ldi	r25, 0xFF	; 255
 da6:	80 ec       	ldi	r24, 0xC0	; 192
 da8:	08 95       	ret

00000daa <__fp_pscA>:
 daa:	00 24       	eor	r0, r0
 dac:	0a 94       	dec	r0
 dae:	16 16       	cp	r1, r22
 db0:	17 06       	cpc	r1, r23
 db2:	18 06       	cpc	r1, r24
 db4:	09 06       	cpc	r0, r25
 db6:	08 95       	ret

00000db8 <__fp_pscB>:
 db8:	00 24       	eor	r0, r0
 dba:	0a 94       	dec	r0
 dbc:	12 16       	cp	r1, r18
 dbe:	13 06       	cpc	r1, r19
 dc0:	14 06       	cpc	r1, r20
 dc2:	05 06       	cpc	r0, r21
 dc4:	08 95       	ret

00000dc6 <__fp_round>:
 dc6:	09 2e       	mov	r0, r25
 dc8:	03 94       	inc	r0
 dca:	00 0c       	add	r0, r0
 dcc:	11 f4       	brne	.+4      	; 0xdd2 <__fp_round+0xc>
 dce:	88 23       	and	r24, r24
 dd0:	52 f0       	brmi	.+20     	; 0xde6 <__fp_round+0x20>
 dd2:	bb 0f       	add	r27, r27
 dd4:	40 f4       	brcc	.+16     	; 0xde6 <__fp_round+0x20>
 dd6:	bf 2b       	or	r27, r31
 dd8:	11 f4       	brne	.+4      	; 0xdde <__fp_round+0x18>
 dda:	60 ff       	sbrs	r22, 0
 ddc:	04 c0       	rjmp	.+8      	; 0xde6 <__fp_round+0x20>
 dde:	6f 5f       	subi	r22, 0xFF	; 255
 de0:	7f 4f       	sbci	r23, 0xFF	; 255
 de2:	8f 4f       	sbci	r24, 0xFF	; 255
 de4:	9f 4f       	sbci	r25, 0xFF	; 255
 de6:	08 95       	ret

00000de8 <__fp_split3>:
 de8:	57 fd       	sbrc	r21, 7
 dea:	90 58       	subi	r25, 0x80	; 128
 dec:	44 0f       	add	r20, r20
 dee:	55 1f       	adc	r21, r21
 df0:	59 f0       	breq	.+22     	; 0xe08 <__fp_splitA+0x10>
 df2:	5f 3f       	cpi	r21, 0xFF	; 255
 df4:	71 f0       	breq	.+28     	; 0xe12 <__fp_splitA+0x1a>
 df6:	47 95       	ror	r20

00000df8 <__fp_splitA>:
 df8:	88 0f       	add	r24, r24
 dfa:	97 fb       	bst	r25, 7
 dfc:	99 1f       	adc	r25, r25
 dfe:	61 f0       	breq	.+24     	; 0xe18 <__fp_splitA+0x20>
 e00:	9f 3f       	cpi	r25, 0xFF	; 255
 e02:	79 f0       	breq	.+30     	; 0xe22 <__fp_splitA+0x2a>
 e04:	87 95       	ror	r24
 e06:	08 95       	ret
 e08:	12 16       	cp	r1, r18
 e0a:	13 06       	cpc	r1, r19
 e0c:	14 06       	cpc	r1, r20
 e0e:	55 1f       	adc	r21, r21
 e10:	f2 cf       	rjmp	.-28     	; 0xdf6 <__fp_split3+0xe>
 e12:	46 95       	lsr	r20
 e14:	f1 df       	rcall	.-30     	; 0xdf8 <__fp_splitA>
 e16:	08 c0       	rjmp	.+16     	; 0xe28 <__fp_splitA+0x30>
 e18:	16 16       	cp	r1, r22
 e1a:	17 06       	cpc	r1, r23
 e1c:	18 06       	cpc	r1, r24
 e1e:	99 1f       	adc	r25, r25
 e20:	f1 cf       	rjmp	.-30     	; 0xe04 <__fp_splitA+0xc>
 e22:	86 95       	lsr	r24
 e24:	71 05       	cpc	r23, r1
 e26:	61 05       	cpc	r22, r1
 e28:	08 94       	sec
 e2a:	08 95       	ret

00000e2c <__fp_zero>:
 e2c:	e8 94       	clt

00000e2e <__fp_szero>:
 e2e:	bb 27       	eor	r27, r27
 e30:	66 27       	eor	r22, r22
 e32:	77 27       	eor	r23, r23
 e34:	cb 01       	movw	r24, r22
 e36:	97 f9       	bld	r25, 7
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
