
Car-Project-Static-Architecture-.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000013f0  00001484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080007e  0080007e  000014a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e56  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000132e  00000000  00000000  00004666  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021a0  00000000  00000000  00005994  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00007b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000151b  00000000  00000000  00008114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002131  00000000  00000000  0000962f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000b760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__vector_1>
       8:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__vector_2>
       c:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define Car_State_Distance_Less_than_50_More_than_30  2
#define Car_State_Distance_Equal_30                   3
#define Car_State_Distance_Less_than_30               4

int main()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	
    uinteg8_t u8_Car_State=Car_State_Check_Distance;
	uinteg8_t u8_Measured_Distance;
	/*Car initialization,includes DC motor driver and ultrasonic sensor*/
    Car_Init();
      9c:	0e 94 6e 00 	call	0xdc	; 0xdc <Car_Init>
      a0:	0b c0       	rjmp	.+22     	; 0xb8 <main+0x26>
				   
				if(u8_Measured_Distance>DISTANCE_50_CM)
				{
					u8_Car_State=Car_State_Distance_More_than_50;
				}
				else if((u8_Measured_Distance<DISTANCE_50_CM)&&(u8_Measured_Distance>DISTANCE_30_CM))
      a2:	91 ee       	ldi	r25, 0xE1	; 225
      a4:	98 0f       	add	r25, r24
      a6:	93 31       	cpi	r25, 0x13	; 19
      a8:	90 f0       	brcs	.+36     	; 0xce <main+0x3c>
				{
					u8_Car_State=Car_State_Distance_Less_than_50_More_than_30;					   
				}
				else if(u8_Measured_Distance==DISTANCE_30_CM)
      aa:	8e 31       	cpi	r24, 0x1E	; 30
      ac:	a1 f0       	breq	.+40     	; 0xd6 <main+0x44>
				{
					u8_Car_State=Car_State_Distance_Equal_30;
				}	
				else if(u8_Measured_Distance<DISTANCE_30_CM)
      ae:	8e 31       	cpi	r24, 0x1E	; 30
      b0:	18 f4       	brcc	.+6      	; 0xb8 <main+0x26>
			}
			break;
		   /*Car move backward 15 percentage of speed in case of the distance ;ess than  30 */						
			case Car_State_Distance_Less_than_30 :
			{
				Car_Backward(SPEED_RATIO_15);		
      b2:	8f e0       	ldi	r24, 0x0F	; 15
      b4:	0e 94 85 00 	call	0x10a	; 0x10a <Car_Backward>
		switch(u8_Car_State)
		{
		   /*Car check distance*/
			case Car_State_Check_Distance:
			{
				Car_Seen_Distance(&u8_Measured_Distance);
      b8:	ce 01       	movw	r24, r28
      ba:	01 96       	adiw	r24, 0x01	; 1
      bc:	0e 94 c8 00 	call	0x190	; 0x190 <Car_Seen_Distance>
				   
				if(u8_Measured_Distance>DISTANCE_50_CM)
      c0:	89 81       	ldd	r24, Y+1	; 0x01
      c2:	83 33       	cpi	r24, 0x33	; 51
      c4:	70 f3       	brcs	.-36     	; 0xa2 <main+0x10>
			}
			break;
		   /*Car move forward 100 percentage of speed in case of the distance more than 50*/			
			case Car_State_Distance_More_than_50:
			{
				Car_Forward(SPEED_RATIO_100);
      c6:	84 e6       	ldi	r24, 0x64	; 100
      c8:	0e 94 78 00 	call	0xf0	; 0xf0 <Car_Forward>
				u8_Car_State=Car_State_Check_Distance;
			}
			break;
      cc:	f5 cf       	rjmp	.-22     	; 0xb8 <main+0x26>
		   /*Car move forward 50 percentage of speed in case of the distance less than 50 and more than 30*/			
			case Car_State_Distance_Less_than_50_More_than_30 :
			{
				Car_Forward(SPEED_RATIO_50);
      ce:	82 e3       	ldi	r24, 0x32	; 50
      d0:	0e 94 78 00 	call	0xf0	; 0xf0 <Car_Forward>
				u8_Car_State=Car_State_Check_Distance;																				
			}
			break;
      d4:	f1 cf       	rjmp	.-30     	; 0xb8 <main+0x26>
		   /*Car move rotate 90 degree in case of the distance equal 30 */							
			case Car_State_Distance_Equal_30 :
			{
				Car_Rotate_90_Degree();
      d6:	0e 94 92 00 	call	0x124	; 0x124 <Car_Rotate_90_Degree>
				u8_Car_State=Car_State_Check_Distance;										
			}
			break;
      da:	ee cf       	rjmp	.-36     	; 0xb8 <main+0x26>

000000dc <Car_Init>:
	DC_Motor_Driver_Backward(&gStr_DC_Motor_Driver_2_CONFIG,u8_Ratio_From_Max_Speed);
}
Car_Steering_Error_t Car_Stop(void)
{
	DC_Motor_Driver_Stop(&gStr_DC_Motor_Driver_1_CONFIG);
	DC_Motor_Driver_Stop(&gStr_DC_Motor_Driver_2_CONFIG);	
      dc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Ultra_Sonic_Init>
      e0:	80 e7       	ldi	r24, 0x70	; 112
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 a4 03 	call	0x748	; 0x748 <DC_Motor_Driver_Init>
      e8:	8c e6       	ldi	r24, 0x6C	; 108
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0c 94 a4 03 	jmp	0x748	; 0x748 <DC_Motor_Driver_Init>

000000f0 <Car_Forward>:
      f0:	cf 93       	push	r28
      f2:	c8 2f       	mov	r28, r24
      f4:	68 2f       	mov	r22, r24
      f6:	80 e7       	ldi	r24, 0x70	; 112
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DC_Motor_Driver_Forward>
      fe:	6c 2f       	mov	r22, r28
     100:	8c e6       	ldi	r24, 0x6C	; 108
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	cf 91       	pop	r28
     106:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <DC_Motor_Driver_Forward>

0000010a <Car_Backward>:
     10a:	cf 93       	push	r28
     10c:	c8 2f       	mov	r28, r24
     10e:	68 2f       	mov	r22, r24
     110:	80 e7       	ldi	r24, 0x70	; 112
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 ed 03 	call	0x7da	; 0x7da <DC_Motor_Driver_Backward>
     118:	6c 2f       	mov	r22, r28
     11a:	8c e6       	ldi	r24, 0x6C	; 108
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	cf 91       	pop	r28
     120:	0c 94 ed 03 	jmp	0x7da	; 0x7da <DC_Motor_Driver_Backward>

00000124 <Car_Rotate_90_Degree>:
	DC_Motor_Driver_Backward(&gStr_DC_Motor_Driver_1_CONFIG,u8_Ratio_From_Max_Speed);
	DC_Motor_Driver_Backward(&gStr_DC_Motor_Driver_2_CONFIG,u8_Ratio_From_Max_Speed);
}
Car_Steering_Error_t Car_Stop(void)
{
	DC_Motor_Driver_Stop(&gStr_DC_Motor_Driver_1_CONFIG);
     124:	80 e7       	ldi	r24, 0x70	; 112
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <DC_Motor_Driver_Stop>
	DC_Motor_Driver_Stop(&gStr_DC_Motor_Driver_2_CONFIG);	
     12c:	8c e6       	ldi	r24, 0x6C	; 108
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <DC_Motor_Driver_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	81 ee       	ldi	r24, 0xE1	; 225
     138:	94 e0       	ldi	r25, 0x04	; 4
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	80 40       	sbci	r24, 0x00	; 0
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <Car_Rotate_90_Degree+0x16>
     142:	00 c0       	rjmp	.+0      	; 0x144 <Car_Rotate_90_Degree+0x20>
     144:	00 00       	nop
}
Car_Steering_Error_t Car_Rotate_90_Degree(void)
{
	Car_Stop();
	_delay_ms(200);	
	DC_Motor_Driver_Forward(&gStr_DC_Motor_Driver_1_CONFIG,15);
     146:	6f e0       	ldi	r22, 0x0F	; 15
     148:	80 e7       	ldi	r24, 0x70	; 112
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DC_Motor_Driver_Forward>
	DC_Motor_Driver_Backward(&gStr_DC_Motor_Driver_2_CONFIG,15);
     150:	6f e0       	ldi	r22, 0x0F	; 15
     152:	8c e6       	ldi	r24, 0x6C	; 108
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 ed 03 	call	0x7da	; 0x7da <DC_Motor_Driver_Backward>
     15a:	2f ef       	ldi	r18, 0xFF	; 255
     15c:	85 ea       	ldi	r24, 0xA5	; 165
     15e:	9e e0       	ldi	r25, 0x0E	; 14
     160:	21 50       	subi	r18, 0x01	; 1
     162:	80 40       	sbci	r24, 0x00	; 0
     164:	90 40       	sbci	r25, 0x00	; 0
     166:	e1 f7       	brne	.-8      	; 0x160 <Car_Rotate_90_Degree+0x3c>
     168:	00 c0       	rjmp	.+0      	; 0x16a <Car_Rotate_90_Degree+0x46>
     16a:	00 00       	nop
	DC_Motor_Driver_Backward(&gStr_DC_Motor_Driver_1_CONFIG,u8_Ratio_From_Max_Speed);
	DC_Motor_Driver_Backward(&gStr_DC_Motor_Driver_2_CONFIG,u8_Ratio_From_Max_Speed);
}
Car_Steering_Error_t Car_Stop(void)
{
	DC_Motor_Driver_Stop(&gStr_DC_Motor_Driver_1_CONFIG);
     16c:	80 e7       	ldi	r24, 0x70	; 112
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <DC_Motor_Driver_Stop>
	DC_Motor_Driver_Stop(&gStr_DC_Motor_Driver_2_CONFIG);	
     174:	8c e6       	ldi	r24, 0x6C	; 108
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <DC_Motor_Driver_Stop>
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	81 ee       	ldi	r24, 0xE1	; 225
     180:	94 e0       	ldi	r25, 0x04	; 4
     182:	21 50       	subi	r18, 0x01	; 1
     184:	80 40       	sbci	r24, 0x00	; 0
     186:	90 40       	sbci	r25, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <Car_Rotate_90_Degree+0x5e>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <Car_Rotate_90_Degree+0x68>
     18c:	00 00       	nop
	DC_Motor_Driver_Forward(&gStr_DC_Motor_Driver_1_CONFIG,15);
	DC_Motor_Driver_Backward(&gStr_DC_Motor_Driver_2_CONFIG,15);
	_delay_ms(600);
	Car_Stop();
	_delay_ms(200);		
}
     18e:	08 95       	ret

00000190 <Car_Seen_Distance>:

Car_Steering_Error_t Car_Seen_Distance(uinteg64_t* Copy_pu64_DIST_IN_CM)
{
	Ultra_Sonic_Get_Distance(Copy_pu64_DIST_IN_CM);
     190:	0c 94 0e 04 	jmp	0x81c	; 0x81c <Ultra_Sonic_Get_Distance>

00000194 <Debug_By_Toggle>:
#define Debug_By_Toggle_State_Other_times 1
#define Debug_By_Toggle_State_Nothing     2


void Debug_By_Toggle(uinteg8_t u8_Pin)
{
     194:	cf 93       	push	r28
	static uinteg8_t u8_Debug_By_Toggle_State=Debug_By_Toggle_State_1st_time;
	switch(u8_Debug_By_Toggle_State)
     196:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__data_end>
     19a:	99 23       	and	r25, r25
     19c:	29 f0       	breq	.+10     	; 0x1a8 <Debug_By_Toggle+0x14>
     19e:	91 30       	cpi	r25, 0x01	; 1
     1a0:	69 f4       	brne	.+26     	; 0x1bc <Debug_By_Toggle+0x28>
            /*Do Nothing*/
		}
		break;
	}

     1a2:	cf 91       	pop	r28
			u8_Debug_By_Toggle_State=Debug_By_Toggle_State_Other_times;
		}
		break;
		case Debug_By_Toggle_State_Other_times:
		{
			DIO_toggle_Pin(u8_Pin);
     1a4:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <DIO_toggle_Pin>
     1a8:	c8 2f       	mov	r28, r24
	static uinteg8_t u8_Debug_By_Toggle_State=Debug_By_Toggle_State_1st_time;
	switch(u8_Debug_By_Toggle_State)
	{
		case Debug_By_Toggle_State_1st_time:
		{
			DIO_Init_Pin(u8_Pin,1);
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	0e 94 a6 04 	call	0x94c	; 0x94c <DIO_Init_Pin>
			DIO_toggle_Pin(u8_Pin);	
     1b0:	8c 2f       	mov	r24, r28
     1b2:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_toggle_Pin>
			u8_Debug_By_Toggle_State=Debug_By_Toggle_State_Other_times;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
            /*Do Nothing*/
		}
		break;
	}

     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <TIMER_CTC_ON_1_ISR>:

}

void TIMER_CTC_ON_1_ISR(void)
{
	svgu64_TIMER_CTC_ON_1_COUNTER++;
     1c0:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <svgu64_TIMER_CTC_ON_1_COUNTER>
     1c4:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <svgu64_TIMER_CTC_ON_1_COUNTER+0x1>
     1c8:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <svgu64_TIMER_CTC_ON_1_COUNTER+0x2>
     1cc:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <svgu64_TIMER_CTC_ON_1_COUNTER+0x3>
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	a1 1d       	adc	r26, r1
     1d4:	b1 1d       	adc	r27, r1
     1d6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <svgu64_TIMER_CTC_ON_1_COUNTER>
     1da:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <svgu64_TIMER_CTC_ON_1_COUNTER+0x1>
     1de:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <svgu64_TIMER_CTC_ON_1_COUNTER+0x2>
     1e2:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <svgu64_TIMER_CTC_ON_1_COUNTER+0x3>
     1e6:	08 95       	ret

000001e8 <ICU_ISR>:
static volatile uinteg64_t svgu64_TIMER_CTC_ON_1_COUNTER=0;
static volatile uinteg8_t  svgu8_TIMER_TICK_COUNT=0;
static volatile uinteg8_t  svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE=ICU_ON_TIME_CONFIG;
static volatile uinteg64_t svgu64_TIME_MICROSECOND=0;
void ICU_ISR(void)
{
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
	
	static uinteg8_t su8_EX_INT_STATE=EXT_INT_FIRST_EDGE;
	
	if(svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE==ICU_ON_TIME_CONFIG)
     1ec:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__data_start>
     1f0:	c1 30       	cpi	r28, 0x01	; 1
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <ICU_ISR+0xe>
     1f4:	5f c0       	rjmp	.+190    	; 0x2b4 <ICU_ISR+0xcc>
				vgu8_ICU_TRIGER_FLAG=1;
			}
			break;
		}
	}
	else if(svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE==ICU_OFF_TIME_CONFIG)
     1f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     1fa:	81 11       	cpse	r24, r1
     1fc:	58 c0       	rjmp	.+176    	; 0x2ae <ICU_ISR+0xc6>
	{
		switch(su8_EX_INT_STATE)
     1fe:	c0 91 7f 00 	lds	r28, 0x007F	; 0x80007f <su8_EX_INT_STATE.1632>
     202:	cc 23       	and	r28, r28
     204:	09 f4       	brne	.+2      	; 0x208 <ICU_ISR+0x20>
     206:	c0 c0       	rjmp	.+384    	; 0x388 <ICU_ISR+0x1a0>
     208:	c1 30       	cpi	r28, 0x01	; 1
     20a:	09 f0       	breq	.+2      	; 0x20e <ICU_ISR+0x26>
     20c:	50 c0       	rjmp	.+160    	; 0x2ae <ICU_ISR+0xc6>

			}
			break;
			case EXT_INT_SECOND_EDGE:
			{
				EXT_INT_INIT(&gStr_ICU_FALLING_EXT_INT2_CONFIG);
     20e:	85 e7       	ldi	r24, 0x75	; 117
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EXT_INT_INIT>
				su8_EX_INT_STATE=EXT_INT_FIRST_EDGE;
     216:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <su8_EX_INT_STATE.1632>
				Timer_Get_tickCount(TIMER2,&svgu8_TIMER_TICK_COUNT);
     21a:	64 e8       	ldi	r22, 0x84	; 132
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 43 08 	call	0x1086	; 0x1086 <Timer_Get_tickCount>
				svgu64_TIME_MICROSECOND=(2*svgu64_TIMER_CTC_ON_1_COUNTER+svgu8_TIMER_TICK_COUNT)*128/8.0;
     226:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <svgu64_TIMER_CTC_ON_1_COUNTER>
     22a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <svgu64_TIMER_CTC_ON_1_COUNTER+0x1>
     22e:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <svgu64_TIMER_CTC_ON_1_COUNTER+0x2>
     232:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <svgu64_TIMER_CTC_ON_1_COUNTER+0x3>
     236:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <svgu8_TIMER_TICK_COUNT>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	aa 1f       	adc	r26, r26
     240:	bb 1f       	adc	r27, r27
     242:	82 0f       	add	r24, r18
     244:	91 1d       	adc	r25, r1
     246:	a1 1d       	adc	r26, r1
     248:	b1 1d       	adc	r27, r1
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	aa 1f       	adc	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	88 0f       	add	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	aa 1f       	adc	r26, r26
     258:	bb 1f       	adc	r27, r27
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	aa 1f       	adc	r26, r26
     260:	bb 1f       	adc	r27, r27
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	aa 1f       	adc	r26, r26
     268:	bb 1f       	adc	r27, r27
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	aa 1f       	adc	r26, r26
     270:	bb 1f       	adc	r27, r27
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	aa 1f       	adc	r26, r26
     278:	bb 1f       	adc	r27, r27
     27a:	bc 01       	movw	r22, r24
     27c:	cd 01       	movw	r24, r26
     27e:	66 0f       	add	r22, r22
     280:	77 1f       	adc	r23, r23
     282:	88 1f       	adc	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatunsisf>
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	5e e3       	ldi	r21, 0x3E	; 62
     292:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     296:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fixunssfsi>
     29a:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <svgu64_TIME_MICROSECOND>
     29e:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <svgu64_TIME_MICROSECOND+0x1>
     2a2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <svgu64_TIME_MICROSECOND+0x2>
     2a6:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <svgu64_TIME_MICROSECOND+0x3>
                vgu8_ICU_TRIGER_FLAG=1;
     2aa:	c0 93 89 00 	sts	0x0089, r28	; 0x800089 <vgu8_ICU_TRIGER_FLAG>
	{
		
	}


}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret
	
	static uinteg8_t su8_EX_INT_STATE=EXT_INT_FIRST_EDGE;
	
	if(svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE==ICU_ON_TIME_CONFIG)
	{
		switch(su8_EX_INT_STATE)
     2b4:	d0 91 7f 00 	lds	r29, 0x007F	; 0x80007f <su8_EX_INT_STATE.1632>
     2b8:	dd 23       	and	r29, r29
     2ba:	09 f4       	brne	.+2      	; 0x2be <ICU_ISR+0xd6>
     2bc:	53 c0       	rjmp	.+166    	; 0x364 <ICU_ISR+0x17c>
     2be:	d1 30       	cpi	r29, 0x01	; 1
     2c0:	b1 f7       	brne	.-20     	; 0x2ae <ICU_ISR+0xc6>
				su8_EX_INT_STATE=EXT_INT_SECOND_EDGE;
			}
			break;
			case EXT_INT_SECOND_EDGE:
			{
				Timer_Get_tickCount(TIMER2,&svgu8_TIMER_TICK_COUNT);
     2c2:	64 e8       	ldi	r22, 0x84	; 132
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 43 08 	call	0x1086	; 0x1086 <Timer_Get_tickCount>
				svgu64_TIME_MICROSECOND=(2*svgu64_TIMER_CTC_ON_1_COUNTER+svgu8_TIMER_TICK_COUNT)*128/8.0;
     2ce:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <svgu64_TIMER_CTC_ON_1_COUNTER>
     2d2:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <svgu64_TIMER_CTC_ON_1_COUNTER+0x1>
     2d6:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <svgu64_TIMER_CTC_ON_1_COUNTER+0x2>
     2da:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <svgu64_TIMER_CTC_ON_1_COUNTER+0x3>
     2de:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <svgu8_TIMER_TICK_COUNT>
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	aa 1f       	adc	r26, r26
     2e8:	bb 1f       	adc	r27, r27
     2ea:	82 0f       	add	r24, r18
     2ec:	91 1d       	adc	r25, r1
     2ee:	a1 1d       	adc	r26, r1
     2f0:	b1 1d       	adc	r27, r1
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	aa 1f       	adc	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	aa 1f       	adc	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	aa 1f       	adc	r26, r26
     308:	bb 1f       	adc	r27, r27
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	aa 1f       	adc	r26, r26
     310:	bb 1f       	adc	r27, r27
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	aa 1f       	adc	r26, r26
     318:	bb 1f       	adc	r27, r27
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	aa 1f       	adc	r26, r26
     320:	bb 1f       	adc	r27, r27
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	66 0f       	add	r22, r22
     328:	77 1f       	adc	r23, r23
     32a:	88 1f       	adc	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatunsisf>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	5e e3       	ldi	r21, 0x3E	; 62
     33a:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     33e:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fixunssfsi>
     342:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <svgu64_TIME_MICROSECOND>
     346:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <svgu64_TIME_MICROSECOND+0x1>
     34a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <svgu64_TIME_MICROSECOND+0x2>
     34e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <svgu64_TIME_MICROSECOND+0x3>
				EXT_INT_INIT(&gStr_ICU_RISING_EXT_INT2_CONFIG);
     352:	87 e7       	ldi	r24, 0x77	; 119
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EXT_INT_INIT>
				su8_EX_INT_STATE=EXT_INT_FIRST_EDGE;
     35a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <su8_EX_INT_STATE.1632>
				vgu8_ICU_TRIGER_FLAG=1;
     35e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <vgu8_ICU_TRIGER_FLAG>
			}
			break;
     362:	a5 cf       	rjmp	.-182    	; 0x2ae <ICU_ISR+0xc6>
	{
		switch(su8_EX_INT_STATE)
		{
			case EXT_INT_FIRST_EDGE:
			{
				Timer_Reset(TIMER2);
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0e 94 49 08 	call	0x1092	; 0x1092 <Timer_Reset>
				svgu64_TIMER_CTC_ON_1_COUNTER=0;
     36a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <svgu64_TIMER_CTC_ON_1_COUNTER>
     36e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <svgu64_TIMER_CTC_ON_1_COUNTER+0x1>
     372:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <svgu64_TIMER_CTC_ON_1_COUNTER+0x2>
     376:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <svgu64_TIMER_CTC_ON_1_COUNTER+0x3>
				EXT_INT_INIT(&gStr_ICU_FALLING_EXT_INT2_CONFIG);
     37a:	85 e7       	ldi	r24, 0x75	; 117
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EXT_INT_INIT>
				su8_EX_INT_STATE=EXT_INT_SECOND_EDGE;
     382:	c0 93 7f 00 	sts	0x007F, r28	; 0x80007f <su8_EX_INT_STATE.1632>
			}
			break;
     386:	93 cf       	rjmp	.-218    	; 0x2ae <ICU_ISR+0xc6>
		switch(su8_EX_INT_STATE)
		{
			case EXT_INT_FIRST_EDGE:
			{

				EXT_INT_INIT(&gStr_ICU_RISING_EXT_INT2_CONFIG);
     388:	87 e7       	ldi	r24, 0x77	; 119
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EXT_INT_INIT>
				su8_EX_INT_STATE=EXT_INT_SECOND_EDGE;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <su8_EX_INT_STATE.1632>
				Timer_Reset(TIMER2);
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 49 08 	call	0x1092	; 0x1092 <Timer_Reset>
				svgu64_TIMER_CTC_ON_1_COUNTER=0;
     39c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <svgu64_TIMER_CTC_ON_1_COUNTER>
     3a0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <svgu64_TIMER_CTC_ON_1_COUNTER+0x1>
     3a4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <svgu64_TIMER_CTC_ON_1_COUNTER+0x2>
     3a8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <svgu64_TIMER_CTC_ON_1_COUNTER+0x3>
	{
		
	}


}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <ICU_Init>:
 * \return void
 *
 **/     
ICU_ERROR_t ICU_Init(gStr_ICU_CONFIG_t* Copy_p_gstr_ICU_CONFIG)
{
	vgu8_ICU_TRIGER_FLAG=0;
     3b2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <vgu8_ICU_TRIGER_FLAG>

	svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE=Copy_p_gstr_ICU_CONFIG->u8_ICU_ON_OR_OFF_MEASURMENT;
     3b6:	fc 01       	movw	r30, r24
     3b8:	80 81       	ld	r24, Z
     3ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	
	if(svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE==ICU_OFF_TIME_CONFIG)
     3be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     3c2:	88 23       	and	r24, r24
     3c4:	99 f0       	breq	.+38     	; 0x3ec <ICU_Init+0x3a>
	{
		EXT_INT_INIT(&gStr_ICU_FALLING_EXT_INT2_CONFIG);
	}
	else if(svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE==ICU_ON_TIME_CONFIG)
     3c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	a1 f0       	breq	.+40     	; 0x3f6 <ICU_Init+0x44>
	{
		EXT_INT_INIT(&gStr_ICU_RISING_EXT_INT2_CONFIG);
		
	}
	
	EXT_INT2_CALL_BACK(ICU_ISR);
     3ce:	84 ef       	ldi	r24, 0xF4	; 244
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 26 06 	call	0xc4c	; 0xc4c <EXT_INT2_CALL_BACK>
	
	Timer_Init(&ICU_TIMER_Init_Config);
     3d6:	89 e7       	ldi	r24, 0x79	; 121
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 a0 06 	call	0xd40	; 0xd40 <Timer_Init>
	Timer_Start(TIMER2,1,TIMER_CTC_ON_1_ISR);
     3de:	40 ee       	ldi	r20, 0xE0	; 224
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <Timer_Start>

	svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE=Copy_p_gstr_ICU_CONFIG->u8_ICU_ON_OR_OFF_MEASURMENT;
	
	if(svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE==ICU_OFF_TIME_CONFIG)
	{
		EXT_INT_INIT(&gStr_ICU_FALLING_EXT_INT2_CONFIG);
     3ec:	85 e7       	ldi	r24, 0x75	; 117
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EXT_INT_INIT>
     3f4:	ec cf       	rjmp	.-40     	; 0x3ce <ICU_Init+0x1c>
	}
	else if(svgu8_ICU_ON_OR_OFF_MEASURMENT_STATE==ICU_ON_TIME_CONFIG)
	{
		EXT_INT_INIT(&gStr_ICU_RISING_EXT_INT2_CONFIG);
     3f6:	87 e7       	ldi	r24, 0x77	; 119
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EXT_INT_INIT>
     3fe:	e7 cf       	rjmp	.-50     	; 0x3ce <ICU_Init+0x1c>

00000400 <ICU_Get_Time_In_MICROSECONDS>:
 * \return void
 *
 **/     
ICU_ERROR_t ICU_Get_Time_In_MICROSECONDS(uinteg64_t *Copy_pu64_On_off_time_buffer)
{
	*Copy_pu64_On_off_time_buffer=svgu64_TIME_MICROSECOND;
     400:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <svgu64_TIME_MICROSECOND>
     404:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <svgu64_TIME_MICROSECOND+0x1>
     408:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <svgu64_TIME_MICROSECOND+0x2>
     40c:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <svgu64_TIME_MICROSECOND+0x3>
     410:	fc 01       	movw	r30, r24
     412:	40 83       	st	Z, r20
     414:	51 83       	std	Z+1, r21	; 0x01
     416:	62 83       	std	Z+2, r22	; 0x02
     418:	73 83       	std	Z+3, r23	; 0x03
}
     41a:	08 95       	ret

0000041c <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE>:
    /*	DIO_Write_Pin(30,0);*/
}
static void PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE(void)
{
	
    if(vsgu8_PWM_TIMER2_LOW_STATE_VALUE==0U)
     41c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <vsgu8_PWM_TIMER2_LOW_STATE_VALUE>
     420:	88 23       	and	r24, r24
     422:	69 f1       	breq	.+90     	; 0x47e <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x62>
    {
	    DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,0);
    }
    else if(vsgu8_PWM_TIMER2_LOW_STATE_VALUE==255)
     424:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <vsgu8_PWM_TIMER2_LOW_STATE_VALUE>
     428:	8f 3f       	cpi	r24, 0xFF	; 255
     42a:	71 f1       	breq	.+92     	; 0x488 <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x6c>
	    DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,1);
    }
    else
    {
	    
	    switch(sgu8_PWM_TIMER2_State)
     42c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <sgu8_PWM_TIMER2_State>
     430:	83 30       	cpi	r24, 0x03	; 3
     432:	19 f0       	breq	.+6      	; 0x43a <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x1e>
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	91 f0       	breq	.+36     	; 0x45c <PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE+0x40>
     438:	08 95       	ret
	    {
		    case PWM_FAST_HIGH_STATE:
		    {
			    Timer_Start(TIMER2,vsgu8_PWM_TIMER2_HIGH_STATE_VALUE,PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE);
     43a:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <vsgu8_PWM_TIMER2_HIGH_STATE_VALUE>
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	4e e0       	ldi	r20, 0x0E	; 14
     442:	52 e0       	ldi	r21, 0x02	; 2
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
			    DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,1);
     44a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <vsu8_PWM_TIMER2_PIN>
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
			    
			    sgu8_PWM_TIMER2_State=PWM_FAST_LOW_STATE;
     454:	84 e0       	ldi	r24, 0x04	; 4
     456:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <sgu8_PWM_TIMER2_State>
			    
		    }
		    break;
     45a:	08 95       	ret
		    case PWM_FAST_LOW_STATE:
		    {

			    Timer_Start(TIMER2,vsgu8_PWM_TIMER2_LOW_STATE_VALUE,PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE);
     45c:	60 91 8d 00 	lds	r22, 0x008D	; 0x80008d <vsgu8_PWM_TIMER2_LOW_STATE_VALUE>
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	4e e0       	ldi	r20, 0x0E	; 14
     464:	52 e0       	ldi	r21, 0x02	; 2
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
			    DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,0);
     46c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <vsu8_PWM_TIMER2_PIN>
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
			    sgu8_PWM_TIMER2_State=PWM_FAST_HIGH_STATE;
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <sgu8_PWM_TIMER2_State>
     47c:	08 95       	ret
static void PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE(void)
{
	
    if(vsgu8_PWM_TIMER2_LOW_STATE_VALUE==0U)
    {
	    DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,0);
     47e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <vsu8_PWM_TIMER2_PIN>
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>
    }
    else if(vsgu8_PWM_TIMER2_LOW_STATE_VALUE==255)
    {
	    DIO_Write_Pin(vsu8_PWM_TIMER2_PIN,1);
     488:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <vsu8_PWM_TIMER2_PIN>
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>

00000492 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE>:
volatile static uinteg8_t  sgu8_PWM_TIMER2_State=PWM_FAST_HIGH_STATE;

static void PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE(void)
{

    if(vsgu8_PWM_TIMER0_LOW_STATE_VALUE==0U)
     492:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <vsgu8_PWM_TIMER0_LOW_STATE_VALUE>
     496:	88 23       	and	r24, r24
     498:	69 f1       	breq	.+90     	; 0x4f4 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x62>
	{
		DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,0);
	}
	else if(vsgu8_PWM_TIMER0_LOW_STATE_VALUE==255)
     49a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <vsgu8_PWM_TIMER0_LOW_STATE_VALUE>
     49e:	8f 3f       	cpi	r24, 0xFF	; 255
     4a0:	71 f1       	breq	.+92     	; 0x4fe <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x6c>
		DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,1);		
	}
	else
	{	
		 
		switch(sgu8_PWM_TIMER0_State)
     4a2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sgu8_PWM_TIMER0_State>
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	19 f0       	breq	.+6      	; 0x4b0 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x1e>
     4aa:	84 30       	cpi	r24, 0x04	; 4
     4ac:	91 f0       	breq	.+36     	; 0x4d2 <PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE+0x40>
     4ae:	08 95       	ret
		{
			case PWM_FAST_HIGH_STATE:
			{
				 Timer_Start(TIMER0,vsgu8_PWM_TIMER0_HIGH_STATE_VALUE,PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE);			
     4b0:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <vsgu8_PWM_TIMER0_HIGH_STATE_VALUE>
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	49 e4       	ldi	r20, 0x49	; 73
     4b8:	52 e0       	ldi	r21, 0x02	; 2
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
				 DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,1);
     4c0:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <vsu8_PWM_TIMER0_PIN>
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
				 
				 sgu8_PWM_TIMER0_State=PWM_FAST_LOW_STATE;
     4ca:	84 e0       	ldi	r24, 0x04	; 4
     4cc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sgu8_PWM_TIMER0_State>
				 
			}
			break;  
     4d0:	08 95       	ret
			case PWM_FAST_LOW_STATE:
			{ 

				 Timer_Start(TIMER0,vsgu8_PWM_TIMER0_LOW_STATE_VALUE,PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE);					 
     4d2:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <vsgu8_PWM_TIMER0_LOW_STATE_VALUE>
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	49 e4       	ldi	r20, 0x49	; 73
     4da:	52 e0       	ldi	r21, 0x02	; 2
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
				 DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,0);
     4e2:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <vsu8_PWM_TIMER0_PIN>
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
				 
				 sgu8_PWM_TIMER0_State=PWM_FAST_HIGH_STATE;
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sgu8_PWM_TIMER0_State>
     4f2:	08 95       	ret
static void PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE(void)
{

    if(vsgu8_PWM_TIMER0_LOW_STATE_VALUE==0U)
	{
		DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,0);
     4f4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <vsu8_PWM_TIMER0_PIN>
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>
	}
	else if(vsgu8_PWM_TIMER0_LOW_STATE_VALUE==255)
	{
		DIO_Write_Pin(vsu8_PWM_TIMER0_PIN,1);		
     4fe:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <vsu8_PWM_TIMER0_PIN>
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>

00000508 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE>:
	}
/*	DIO_Write_Pin(30,0);*/
}
static void PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE(void)
{
	Debug_By_Toggle(31);
     508:	8f e1       	ldi	r24, 0x1F	; 31
     50a:	0e 94 ca 00 	call	0x194	; 0x194 <Debug_By_Toggle>
    if(vsgu8_PWM_TIMER1_LOW_STATE_VALUE==0U)
     50e:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <vsgu8_PWM_TIMER1_LOW_STATE_VALUE>
     512:	88 23       	and	r24, r24
     514:	69 f1       	breq	.+90     	; 0x570 <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x68>
    {
	    DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,0);
    }
    else if(vsgu8_PWM_TIMER1_LOW_STATE_VALUE==255)
     516:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <vsgu8_PWM_TIMER1_LOW_STATE_VALUE>
     51a:	8f 3f       	cpi	r24, 0xFF	; 255
     51c:	71 f1       	breq	.+92     	; 0x57a <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x72>
    {
	    DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,1);
    }
    else
    {
	    switch(sgu8_PWM_TIMER1_State)
     51e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <sgu8_PWM_TIMER1_State>
     522:	83 30       	cpi	r24, 0x03	; 3
     524:	19 f0       	breq	.+6      	; 0x52c <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x24>
     526:	84 30       	cpi	r24, 0x04	; 4
     528:	91 f0       	breq	.+36     	; 0x54e <PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE+0x46>
     52a:	08 95       	ret
	    {
		    case PWM_FAST_HIGH_STATE:
		    {
			    Timer_Start(TIMER1,vsgu8_PWM_TIMER1_HIGH_STATE_VALUE,PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE);
     52c:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <vsgu8_PWM_TIMER1_HIGH_STATE_VALUE>
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	44 e8       	ldi	r20, 0x84	; 132
     534:	52 e0       	ldi	r21, 0x02	; 2
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
			    DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,0);
     53c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <vsu8_PWM_TIMER1_PIN>
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
			    sgu8_PWM_TIMER1_State=PWM_FAST_LOW_STATE;
     546:	84 e0       	ldi	r24, 0x04	; 4
     548:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <sgu8_PWM_TIMER1_State>
			    
		    }
		    break;
     54c:	08 95       	ret
		    case PWM_FAST_LOW_STATE:
		    {
			    Timer_Start(TIMER1,vsgu8_PWM_TIMER1_LOW_STATE_VALUE,PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE);
     54e:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <vsgu8_PWM_TIMER1_LOW_STATE_VALUE>
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	44 e8       	ldi	r20, 0x84	; 132
     556:	52 e0       	ldi	r21, 0x02	; 2
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
			    DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,1);
     55e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <vsu8_PWM_TIMER1_PIN>
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
			    sgu8_PWM_TIMER1_State=PWM_FAST_HIGH_STATE;
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <sgu8_PWM_TIMER1_State>
     56e:	08 95       	ret
static void PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE(void)
{
	Debug_By_Toggle(31);
    if(vsgu8_PWM_TIMER1_LOW_STATE_VALUE==0U)
    {
	    DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,0);
     570:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <vsu8_PWM_TIMER1_PIN>
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>
    }
    else if(vsgu8_PWM_TIMER1_LOW_STATE_VALUE==255)
    {
	    DIO_Write_Pin(vsu8_PWM_TIMER1_PIN,1);
     57a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <vsu8_PWM_TIMER1_PIN>
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>

00000584 <PWM_INIT>:
    }

}

PWM_ERROR_t PWM_INIT(gstr_PWM_INIT_CONFIG*pstr_PWM_INIT_CONFIG)
{
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	00 d0       	rcall	.+0      	; 0x58e <PWM_INIT+0xa>
     58e:	00 d0       	rcall	.+0      	; 0x590 <PWM_INIT+0xc>
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	8c 01       	movw	r16, r24
	gStrTimerConfiguration_t Str_PWM_Timer_Config;
	PWM_ERROR_t PWM_Error_PWM_INIT=PWM_INIT_NO_ERROR;
	
	if(pstr_PWM_INIT_CONFIG->u8_PWM_Execution_Method==PWM_Software_Config)
     596:	fc 01       	movw	r30, r24
     598:	80 81       	ld	r24, Z
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	99 f0       	breq	.+38     	; 0x5c4 <PWM_INIT+0x40>
	else 
	{
		
	}
	
	 DIO_Init_Pin(pstr_PWM_INIT_CONFIG->u8_PWM_PIN,1);
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	f8 01       	movw	r30, r16
     5a2:	84 81       	ldd	r24, Z+4	; 0x04
     5a4:	0e 94 a6 04 	call	0x94c	; 0x94c <DIO_Init_Pin>
	 DIO_Write_Pin(pstr_PWM_INIT_CONFIG->u8_PWM_PIN,0);
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	f8 01       	movw	r30, r16
     5ac:	84 81       	ldd	r24, Z+4	; 0x04
     5ae:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
	 
}
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	08 95       	ret
	gStrTimerConfiguration_t Str_PWM_Timer_Config;
	PWM_ERROR_t PWM_Error_PWM_INIT=PWM_INIT_NO_ERROR;
	
	if(pstr_PWM_INIT_CONFIG->u8_PWM_Execution_Method==PWM_Software_Config)
	{
		if(pstr_PWM_INIT_CONFIG->u8_PWM_Mode==PWM_Phase_Corret_Config)
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	51 f7       	brne	.-44     	; 0x59e <PWM_INIT+0x1a>
		{

			if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type<TIMER0  || pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type>TIMER2)
     5ca:	82 81       	ldd	r24, Z+2	; 0x02
     5cc:	83 30       	cpi	r24, 0x03	; 3
     5ce:	38 f7       	brcc	.-50     	; 0x59e <PWM_INIT+0x1a>
			{
			}
			else
			{
				if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER0)
     5d0:	88 23       	and	r24, r24
     5d2:	91 f0       	breq	.+36     	; 0x5f8 <PWM_INIT+0x74>
				{
					vsu8_PWM_TIMER0_PIN=pstr_PWM_INIT_CONFIG->u8_PWM_PIN;
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER1)
				{
					vsu8_PWM_TIMER1_PIN=pstr_PWM_INIT_CONFIG->u8_PWM_PIN;
     5d4:	f8 01       	movw	r30, r16
     5d6:	94 81       	ldd	r25, Z+4	; 0x04
			{
				if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER0)
				{
					vsu8_PWM_TIMER0_PIN=pstr_PWM_INIT_CONFIG->u8_PWM_PIN;
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER1)
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	91 f0       	breq	.+36     	; 0x600 <PWM_INIT+0x7c>
				{
					vsu8_PWM_TIMER1_PIN=pstr_PWM_INIT_CONFIG->u8_PWM_PIN;
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER2)
				{
					vsu8_PWM_TIMER2_PIN=pstr_PWM_INIT_CONFIG->u8_PWM_PIN;
     5dc:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <vsu8_PWM_TIMER2_PIN>
				}
				Str_PWM_Timer_Config.Timer_Channel=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type;
     5e0:	89 83       	std	Y+1, r24	; 0x01
				Str_PWM_Timer_Config.Timer_Psc=pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Preiodicity;
     5e2:	f8 01       	movw	r30, r16
     5e4:	83 81       	ldd	r24, Z+3	; 0x03
     5e6:	8a 83       	std	Y+2, r24	; 0x02
				Str_PWM_Timer_Config.Timer_Mode=COUNTER_MODE;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	8b 83       	std	Y+3, r24	; 0x03
				Str_PWM_Timer_Config.Interrupt_Mode=INTERRUPT;			
     5ec:	8c 83       	std	Y+4, r24	; 0x04
				Timer_Init(&Str_PWM_Timer_Config);
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 a0 06 	call	0xd40	; 0xd40 <Timer_Init>
     5f6:	d3 cf       	rjmp	.-90     	; 0x59e <PWM_INIT+0x1a>
			}
			else
			{
				if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER0)
				{
					vsu8_PWM_TIMER0_PIN=pstr_PWM_INIT_CONFIG->u8_PWM_PIN;
     5f8:	94 81       	ldd	r25, Z+4	; 0x04
     5fa:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <vsu8_PWM_TIMER0_PIN>
     5fe:	f0 cf       	rjmp	.-32     	; 0x5e0 <PWM_INIT+0x5c>
				}
				else if(pstr_PWM_INIT_CONFIG->u8_PWM_Timer_Type==TIMER1)
				{
					vsu8_PWM_TIMER1_PIN=pstr_PWM_INIT_CONFIG->u8_PWM_PIN;
     600:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <vsu8_PWM_TIMER1_PIN>
     604:	ed cf       	rjmp	.-38     	; 0x5e0 <PWM_INIT+0x5c>

00000606 <PWM_Start>:
	 DIO_Write_Pin(pstr_PWM_INIT_CONFIG->u8_PWM_PIN,0);
	 
}

PWM_ERROR_t PWM_Start(uinteg8_t u8_TIMER_Used,uinteg8_t Copy_u8_PWM_Duty_Cycle)
{
     606:	cf 93       	push	r28
     608:	c6 2f       	mov	r28, r22
	
	static uinteg8_t u8_PWM_TIMER0_Start_Flag=1;
	static uinteg8_t u8_PWM_TIMER1_Start_Flag=1;
	static uinteg8_t u8_PWM_TIMER2_Start_Flag=1;	
		
	if(u8_TIMER_Used==TIMER0)
     60a:	81 11       	cpse	r24, r1
     60c:	27 c0       	rjmp	.+78     	; 0x65c <PWM_Start+0x56>
	{
		if(Copy_u8_PWM_Duty_Cycle!=su8_PWM_TIMER0_Duty_Cycle)
     60e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <su8_PWM_TIMER0_Duty_Cycle.1713>
     612:	86 17       	cp	r24, r22
     614:	e1 f0       	breq	.+56     	; 0x64e <PWM_Start+0x48>
		{
			vsgu8_PWM_TIMER0_LOW_STATE_VALUE=(Copy_u8_PWM_Duty_Cycle*255)/100.0;
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	68 9f       	mul	r22, r24
     61a:	b0 01       	movw	r22, r0
     61c:	11 24       	eor	r1, r1
     61e:	07 2e       	mov	r0, r23
     620:	00 0c       	add	r0, r0
     622:	88 0b       	sbc	r24, r24
     624:	99 0b       	sbc	r25, r25
     626:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__floatsisf>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	48 ec       	ldi	r20, 0xC8	; 200
     630:	52 e4       	ldi	r21, 0x42	; 66
     632:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__divsf3>
     636:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fixunssfsi>
     63a:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <vsgu8_PWM_TIMER0_LOW_STATE_VALUE>
			vsgu8_PWM_TIMER0_HIGH_STATE_VALUE=255-vsgu8_PWM_TIMER0_LOW_STATE_VALUE-1;	
     63e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <vsgu8_PWM_TIMER0_LOW_STATE_VALUE>
     642:	8e ef       	ldi	r24, 0xFE	; 254
     644:	89 1b       	sub	r24, r25
     646:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <vsgu8_PWM_TIMER0_HIGH_STATE_VALUE>
			su8_PWM_TIMER0_Duty_Cycle=Copy_u8_PWM_Duty_Cycle;
     64a:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <su8_PWM_TIMER0_Duty_Cycle.1713>
		}
		else
		{
			/*Do Nothing*/
		}
		if(u8_PWM_TIMER0_Start_Flag==1)
     64e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <u8_PWM_TIMER0_Start_Flag.1716>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	09 f4       	brne	.+2      	; 0x658 <PWM_Start+0x52>
     656:	6a c0       	rjmp	.+212    	; 0x72c <PWM_Start+0x126>
	else
	{
		/*Do Nothing*/	
	}	

     658:	cf 91       	pop	r28
     65a:	08 95       	ret
		else
		{
			/*Do Nothing*/
		}				
	}
	else if(u8_TIMER_Used==TIMER1)
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	a1 f1       	breq	.+104    	; 0x6c8 <PWM_Start+0xc2>
		else
		{
			/*Do Nothing*/
		}	
	}
	else if(u8_TIMER_Used==TIMER2)
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	d1 f7       	brne	.-12     	; 0x658 <PWM_Start+0x52>
	{
		if(Copy_u8_PWM_Duty_Cycle!=su8_PWM_TIMER2_Duty_Cycle)
     664:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <su8_PWM_TIMER2_Duty_Cycle.1715>
     668:	68 17       	cp	r22, r24
     66a:	e1 f0       	breq	.+56     	; 0x6a4 <PWM_Start+0x9e>
		{
			vsgu8_PWM_TIMER2_LOW_STATE_VALUE=(Copy_u8_PWM_Duty_Cycle*255)/100.0;
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	68 9f       	mul	r22, r24
     670:	b0 01       	movw	r22, r0
     672:	11 24       	eor	r1, r1
     674:	07 2e       	mov	r0, r23
     676:	00 0c       	add	r0, r0
     678:	88 0b       	sbc	r24, r24
     67a:	99 0b       	sbc	r25, r25
     67c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__floatsisf>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	48 ec       	ldi	r20, 0xC8	; 200
     686:	52 e4       	ldi	r21, 0x42	; 66
     688:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__divsf3>
     68c:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fixunssfsi>
     690:	60 93 8d 00 	sts	0x008D, r22	; 0x80008d <vsgu8_PWM_TIMER2_LOW_STATE_VALUE>
			vsgu8_PWM_TIMER2_HIGH_STATE_VALUE=255-vsgu8_PWM_TIMER2_LOW_STATE_VALUE-1;
     694:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <vsgu8_PWM_TIMER2_LOW_STATE_VALUE>
     698:	8e ef       	ldi	r24, 0xFE	; 254
     69a:	89 1b       	sub	r24, r25
     69c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <vsgu8_PWM_TIMER2_HIGH_STATE_VALUE>
			su8_PWM_TIMER2_Duty_Cycle=Copy_u8_PWM_Duty_Cycle;
     6a0:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <su8_PWM_TIMER2_Duty_Cycle.1715>
		}
		else
		{
			/*Do Nothing*/
		}
		if(u8_PWM_TIMER2_Start_Flag==1)
     6a4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_PWM_TIMER2_Start_Flag.1718>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	b1 f6       	brne	.-84     	; 0x658 <PWM_Start+0x52>
		{
			Timer_Reset(TIMER2);
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 49 08 	call	0x1092	; 0x1092 <Timer_Reset>
			Timer_Start(TIMER2,vsgu8_PWM_TIMER2_LOW_STATE_VALUE,PWM_TIMER2_INTERRUPT_SERVICE_ROUTINE);
     6b2:	60 91 8d 00 	lds	r22, 0x008D	; 0x80008d <vsgu8_PWM_TIMER2_LOW_STATE_VALUE>
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	4e e0       	ldi	r20, 0x0E	; 14
     6ba:	52 e0       	ldi	r21, 0x02	; 2
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
			
			u8_PWM_TIMER2_Start_Flag=0;
     6c2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <u8_PWM_TIMER2_Start_Flag.1718>
     6c6:	c8 cf       	rjmp	.-112    	; 0x658 <PWM_Start+0x52>
			/*Do Nothing*/
		}				
	}
	else if(u8_TIMER_Used==TIMER1)
	{
		if(Copy_u8_PWM_Duty_Cycle!=su8_PWM_TIMER1_Duty_Cycle)
     6c8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <su8_PWM_TIMER1_Duty_Cycle.1714>
     6cc:	68 17       	cp	r22, r24
     6ce:	e1 f0       	breq	.+56     	; 0x708 <PWM_Start+0x102>
		{
			vsgu8_PWM_TIMER1_LOW_STATE_VALUE=(Copy_u8_PWM_Duty_Cycle*255)/100.0;
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	68 9f       	mul	r22, r24
     6d4:	b0 01       	movw	r22, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	07 2e       	mov	r0, r23
     6da:	00 0c       	add	r0, r0
     6dc:	88 0b       	sbc	r24, r24
     6de:	99 0b       	sbc	r25, r25
     6e0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__floatsisf>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	48 ec       	ldi	r20, 0xC8	; 200
     6ea:	52 e4       	ldi	r21, 0x42	; 66
     6ec:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__divsf3>
     6f0:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fixunssfsi>
     6f4:	60 93 8f 00 	sts	0x008F, r22	; 0x80008f <vsgu8_PWM_TIMER1_LOW_STATE_VALUE>
			vsgu8_PWM_TIMER1_HIGH_STATE_VALUE=255-vsgu8_PWM_TIMER1_LOW_STATE_VALUE-1;
     6f8:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <vsgu8_PWM_TIMER1_LOW_STATE_VALUE>
     6fc:	8e ef       	ldi	r24, 0xFE	; 254
     6fe:	89 1b       	sub	r24, r25
     700:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <vsgu8_PWM_TIMER1_HIGH_STATE_VALUE>
			su8_PWM_TIMER1_Duty_Cycle=Copy_u8_PWM_Duty_Cycle;
     704:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <su8_PWM_TIMER1_Duty_Cycle.1714>
		}
		else
		{
			/*Do Nothing*/
		}
		if(u8_PWM_TIMER1_Start_Flag==1)
     708:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <u8_PWM_TIMER1_Start_Flag.1717>
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	09 f0       	breq	.+2      	; 0x712 <PWM_Start+0x10c>
     710:	a3 cf       	rjmp	.-186    	; 0x658 <PWM_Start+0x52>
		{
			Timer_Reset(TIMER1);
     712:	0e 94 49 08 	call	0x1092	; 0x1092 <Timer_Reset>
			Timer_Start(TIMER1,vsgu8_PWM_TIMER1_LOW_STATE_VALUE,PWM_TIMER1_INTERRUPT_SERVICE_ROUTINE);
     716:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <vsgu8_PWM_TIMER1_LOW_STATE_VALUE>
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	44 e8       	ldi	r20, 0x84	; 132
     71e:	52 e0       	ldi	r21, 0x02	; 2
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
			
			u8_PWM_TIMER1_Start_Flag=0;
     726:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <u8_PWM_TIMER1_Start_Flag.1717>
     72a:	96 cf       	rjmp	.-212    	; 0x658 <PWM_Start+0x52>
		{
			/*Do Nothing*/
		}
		if(u8_PWM_TIMER0_Start_Flag==1)
		{
			Timer_Reset(TIMER0);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 49 08 	call	0x1092	; 0x1092 <Timer_Reset>
			Timer_Start(TIMER0,vsgu8_PWM_TIMER0_LOW_STATE_VALUE,PWM_TIMER0_INTERRUPT_SERVICE_ROUTINE);
     732:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <vsgu8_PWM_TIMER0_LOW_STATE_VALUE>
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	49 e4       	ldi	r20, 0x49	; 73
     73a:	52 e0       	ldi	r21, 0x02	; 2
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer_Start>
			
			u8_PWM_TIMER0_Start_Flag=0;
     742:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <u8_PWM_TIMER0_Start_Flag.1716>
     746:	88 cf       	rjmp	.-240    	; 0x658 <PWM_Start+0x52>

00000748 <DC_Motor_Driver_Init>:
#include "PWM.h"
#include "DC_Motor_Driver_PostBConfig.h"
#include "DC_Motor_Driver_Designer.h"

DC_Motor_Driver_Error_t DC_Motor_Driver_Init(gStr_DC_Motor_Driver_CONFIG_t* Copy_str_DC_Motor_Driver_CONFIG)
{
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	00 d0       	rcall	.+0      	; 0x752 <DC_Motor_Driver_Init+0xa>
     752:	00 d0       	rcall	.+0      	; 0x754 <DC_Motor_Driver_Init+0xc>
     754:	1f 92       	push	r1
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	8c 01       	movw	r16, r24
	gstr_PWM_INIT_CONFIG str_DC_Motor_PWM_INIT_CONFIG={  PWM_Software_Config
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	9a 83       	std	Y+2, r25	; 0x02
     764:	8b 83       	std	Y+3, r24	; 0x03
     766:	85 e0       	ldi	r24, 0x05	; 5
     768:	8c 83       	std	Y+4, r24	; 0x04
     76a:	f8 01       	movw	r30, r16
     76c:	81 81       	ldd	r24, Z+1	; 0x01
     76e:	8d 83       	std	Y+5, r24	; 0x05
														,PWM_TIMER1
														,PWM_Periodicty_30_HZ_TIMER_1
														,Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_PWM_Pin
														};
														
	PWM_INIT(&str_DC_Motor_PWM_INIT_CONFIG);
     770:	ce 01       	movw	r24, r28
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	0e 94 c2 02 	call	0x584	; 0x584 <PWM_INIT>
	DIO_Init_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Backward_Pin,1);
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	f8 01       	movw	r30, r16
     77c:	82 81       	ldd	r24, Z+2	; 0x02
     77e:	0e 94 a6 04 	call	0x94c	; 0x94c <DIO_Init_Pin>
	DIO_Init_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,1);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	f8 01       	movw	r30, r16
     786:	83 81       	ldd	r24, Z+3	; 0x03
     788:	0e 94 a6 04 	call	0x94c	; 0x94c <DIO_Init_Pin>
}
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <DC_Motor_Driver_Stop>:
DC_Motor_Driver_Error_t DC_Motor_Driver_Stop(gStr_DC_Motor_Driver_CONFIG_t* Copy_str_DC_Motor_Driver_CONFIG)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Backward_Pin,0);
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,0);	
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
	DIO_Init_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,1);
}
DC_Motor_Driver_Error_t DC_Motor_Driver_Stop(gStr_DC_Motor_Driver_CONFIG_t* Copy_str_DC_Motor_Driver_CONFIG)
{
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Backward_Pin,0);
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,0);	
     7b6:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>

000007ba <DC_Motor_Driver_Forward>:
}
DC_Motor_Driver_Error_t DC_Motor_Driver_Forward(gStr_DC_Motor_Driver_CONFIG_t* Copy_str_DC_Motor_Driver_CONFIG,uinteg8_t Copy_u8_DC_Motor_Driver_Speed_Duty_cycle)
{
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24

   PWM_Start(PWM_TIMER1,Copy_u8_DC_Motor_Driver_Speed_Duty_cycle);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 03 03 	call	0x606	; 0x606 <PWM_Start>
   DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,1);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
   DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Backward_Pin,0);
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02

}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
DC_Motor_Driver_Error_t DC_Motor_Driver_Forward(gStr_DC_Motor_Driver_CONFIG_t* Copy_str_DC_Motor_Driver_CONFIG,uinteg8_t Copy_u8_DC_Motor_Driver_Speed_Duty_cycle)
{

   PWM_Start(PWM_TIMER1,Copy_u8_DC_Motor_Driver_Speed_Duty_cycle);
   DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,1);
   DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Backward_Pin,0);
     7d6:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>

000007da <DC_Motor_Driver_Backward>:

}
DC_Motor_Driver_Error_t DC_Motor_Driver_Backward(gStr_DC_Motor_Driver_CONFIG_t* Copy_str_DC_Motor_Driver_CONFIG,uinteg8_t Copy_u8_DC_Motor_Driver_Speed_Duty_cycle)
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
	PWM_Start(PWM_TIMER1,Copy_u8_DC_Motor_Driver_Speed_Duty_cycle);
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 03 03 	call	0x606	; 0x606 <PWM_Start>
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Backward_Pin,1);
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,0);
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
}
DC_Motor_Driver_Error_t DC_Motor_Driver_Backward(gStr_DC_Motor_Driver_CONFIG_t* Copy_str_DC_Motor_Driver_CONFIG,uinteg8_t Copy_u8_DC_Motor_Driver_Speed_Duty_cycle)
{
	PWM_Start(PWM_TIMER1,Copy_u8_DC_Motor_Driver_Speed_Duty_cycle);
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Backward_Pin,1);
	DIO_Write_Pin(Copy_str_DC_Motor_Driver_CONFIG->u8_DC_Motor_Driver_Forward_Pin,0);
     7f6:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <DIO_Write_Pin>

000007fa <Ultra_Sonic_Init>:
 *
 **/     
Ultra_Error_t Ultra_Sonic_Init(void )
{
	 /**Ultrasonic initalization**/
	 ICU_Init(&gStr_ICU_Config);
     7fa:	81 e6       	ldi	r24, 0x61	; 97
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <ICU_Init>
	 DIO_Init_Pin(15,1);
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	8f e0       	ldi	r24, 0x0F	; 15
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 a6 04 	call	0x94c	; 0x94c <DIO_Init_Pin>
     DIO_Write_Pin(15,0);
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	8f e0       	ldi	r24, 0x0F	; 15
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
}
     81a:	08 95       	ret

0000081c <Ultra_Sonic_Get_Distance>:
 * \param *pu64Reading (Output) : The time reading is passed to this parameter
 * \return void
 *
 **/     
Ultra_Error_t Ultra_Sonic_Get_Distance(uinteg64_t *pu64Reading)
{
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <Ultra_Sonic_Get_Distance+0xa>
     826:	00 d0       	rcall	.+0      	; 0x828 <Ultra_Sonic_Get_Distance+0xc>
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	8c 01       	movw	r16, r24
	static uinteg8_t u8_Ultrasonic_flag_1st_time=1;
	uinteg64_t u64_ICU_TIME_IN_MICRO=0;
     82e:	19 82       	std	Y+1, r1	; 0x01
     830:	1a 82       	std	Y+2, r1	; 0x02
     832:	1b 82       	std	Y+3, r1	; 0x03
     834:	1c 82       	std	Y+4, r1	; 0x04
	
	ICU_Get_Time_In_MICROSECONDS(&u64_ICU_TIME_IN_MICRO);
     836:	ce 01       	movw	r24, r28
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	0e 94 00 02 	call	0x400	; 0x400 <ICU_Get_Time_In_MICROSECONDS>
	*pu64Reading=u64_ICU_TIME_IN_MICRO*0.017;
     83e:	69 81       	ldd	r22, Y+1	; 0x01
     840:	7a 81       	ldd	r23, Y+2	; 0x02
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatunsisf>
     84a:	26 e9       	ldi	r18, 0x96	; 150
     84c:	33 e4       	ldi	r19, 0x43	; 67
     84e:	4b e8       	ldi	r20, 0x8B	; 139
     850:	5c e3       	ldi	r21, 0x3C	; 60
     852:	0e 94 89 09 	call	0x1312	; 0x1312 <__mulsf3>
     856:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fixunssfsi>
     85a:	f8 01       	movw	r30, r16
     85c:	60 83       	st	Z, r22
     85e:	71 83       	std	Z+1, r23	; 0x01
     860:	82 83       	std	Z+2, r24	; 0x02
     862:	93 83       	std	Z+3, r25	; 0x03
	if(u8_Ultrasonic_flag_1st_time==1)
     864:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <u8_Ultrasonic_flag_1st_time.1806>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	11 f1       	breq	.+68     	; 0x8b0 <__stack+0x51>
	{				
        Ultra_Sonic_Triger();
	    u8_Ultrasonic_flag_1st_time=0;
	}
	if(vgu8_ICU_TRIGER_FLAG==1)
     86c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <vgu8_ICU_TRIGER_FLAG>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	49 f0       	breq	.+18     	; 0x886 <__stack+0x27>
/*		Debug_By_Toggle(23);	*/
        Ultra_Sonic_Triger();
		vgu8_ICU_TRIGER_FLAG=0;	
	}

}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret
	 DIO_Init_Pin(15,1);
     DIO_Write_Pin(15,0);
}
static void Ultra_Sonic_Triger(void)
{
	DIO_Write_Pin(15,1);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	8f e0       	ldi	r24, 0x0F	; 15
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     892:	e7 ec       	ldi	r30, 0xC7	; 199
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <__stack+0x37>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <__stack+0x3d>
     89c:	00 00       	nop
	_delay_us(100);
	DIO_Write_Pin(15,0);
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	8f e0       	ldi	r24, 0x0F	; 15
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
	}
	if(vgu8_ICU_TRIGER_FLAG==1)
	{
/*		Debug_By_Toggle(23);	*/
        Ultra_Sonic_Triger();
		vgu8_ICU_TRIGER_FLAG=0;	
     8aa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <vgu8_ICU_TRIGER_FLAG>
     8ae:	e2 cf       	rjmp	.-60     	; 0x874 <__stack+0x15>
	 DIO_Init_Pin(15,1);
     DIO_Write_Pin(15,0);
}
static void Ultra_Sonic_Triger(void)
{
	DIO_Write_Pin(15,1);
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	8f e0       	ldi	r24, 0x0F	; 15
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
     8bc:	87 ec       	ldi	r24, 0xC7	; 199
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <__stack+0x61>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <__stack+0x67>
     8c6:	00 00       	nop
	_delay_us(100);
	DIO_Write_Pin(15,0);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	8f e0       	ldi	r24, 0x0F	; 15
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_Write_Pin>
	ICU_Get_Time_In_MICROSECONDS(&u64_ICU_TIME_IN_MICRO);
	*pu64Reading=u64_ICU_TIME_IN_MICRO*0.017;
	if(u8_Ultrasonic_flag_1st_time==1)
	{				
        Ultra_Sonic_Triger();
	    u8_Ultrasonic_flag_1st_time=0;
     8d4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <u8_Ultrasonic_flag_1st_time.1806>
     8d8:	c9 cf       	rjmp	.-110    	; 0x86c <__stack+0xd>

000008da <__vector_16>:
	 }
	 return sgADC_Error_ADC_READ_API; 
 }
 
ADC_ISR_CODE()
{
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	2f 93       	push	r18
     8e6:	3f 93       	push	r19
     8e8:	4f 93       	push	r20
     8ea:	5f 93       	push	r21
     8ec:	6f 93       	push	r22
     8ee:	7f 93       	push	r23
     8f0:	8f 93       	push	r24
     8f2:	9f 93       	push	r25
     8f4:	af 93       	push	r26
     8f6:	bf 93       	push	r27
     8f8:	ef 93       	push	r30
     8fa:	ff 93       	push	r31
	DIO_Init_Pin(26,1);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	8a e1       	ldi	r24, 0x1A	; 26
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 a6 04 	call	0x94c	; 0x94c <DIO_Init_Pin>
	DIO_toggle_Pin(26);
     908:	8a e1       	ldi	r24, 0x1A	; 26
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_toggle_Pin>
	
	TIMER_CLR_INT_FLAG(TIMER1_B_COMP_FLAG);
     910:	88 e0       	ldi	r24, 0x08	; 8
     912:	88 bf       	out	0x38, r24	; 56
	
	if(NullPointer!=sgPntrToFun_ADC_ISR)
     914:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sgPntrToFun_ADC_ISR>
     918:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <sgPntrToFun_ADC_ISR+0x1>
     91c:	89 2b       	or	r24, r25
     91e:	29 f0       	breq	.+10     	; 0x92a <__vector_16+0x50>
	{
			sgPntrToFun_ADC_ISR();
     920:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <sgPntrToFun_ADC_ISR>
     924:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <sgPntrToFun_ADC_ISR+0x1>
     928:	09 95       	icall
	{
		/*Do Nothing*/
	}

	
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <DIO_Init_Pin>:
	switch(por)
	{
		case 'A':TOGGLE_PORT(WriteRegisterA);
			  break;
		case 'B':TOGGLE_PORT(WriteRegisterB);
		      break;
     94c:	80 32       	cpi	r24, 0x20	; 32
     94e:	f0 f4       	brcc	.+60     	; 0x98c <DIO_Init_Pin+0x40>
     950:	98 2f       	mov	r25, r24
     952:	97 70       	andi	r25, 0x07	; 7
     954:	86 95       	lsr	r24
     956:	86 95       	lsr	r24
     958:	86 95       	lsr	r24
     95a:	8f 5b       	subi	r24, 0xBF	; 191
     95c:	83 34       	cpi	r24, 0x43	; 67
     95e:	c1 f0       	breq	.+48     	; 0x990 <DIO_Init_Pin+0x44>
     960:	84 34       	cpi	r24, 0x44	; 68
     962:	09 f4       	brne	.+2      	; 0x966 <DIO_Init_Pin+0x1a>
     964:	42 c0       	rjmp	.+132    	; 0x9ea <DIO_Init_Pin+0x9e>
     966:	82 34       	cpi	r24, 0x42	; 66
     968:	79 f1       	breq	.+94     	; 0x9c8 <DIO_Init_Pin+0x7c>
     96a:	4a b3       	in	r20, 0x1a	; 26
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	61 11       	cpse	r22, r1
     972:	1f c0       	rjmp	.+62     	; 0x9b2 <DIO_Init_Pin+0x66>
     974:	b9 01       	movw	r22, r18
     976:	02 c0       	rjmp	.+4      	; 0x97c <DIO_Init_Pin+0x30>
     978:	66 0f       	add	r22, r22
     97a:	77 1f       	adc	r23, r23
     97c:	9a 95       	dec	r25
     97e:	e2 f7       	brpl	.-8      	; 0x978 <DIO_Init_Pin+0x2c>
     980:	cb 01       	movw	r24, r22
     982:	80 95       	com	r24
     984:	84 23       	and	r24, r20
     986:	8a bb       	out	0x1a, r24	; 26
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	08 95       	ret
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	08 95       	ret
     990:	44 b3       	in	r20, 0x14	; 20
     992:	21 e0       	ldi	r18, 0x01	; 1
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	61 11       	cpse	r22, r1
     998:	38 c0       	rjmp	.+112    	; 0xa0a <DIO_Init_Pin+0xbe>
     99a:	b9 01       	movw	r22, r18
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <DIO_Init_Pin+0x56>
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	9a 95       	dec	r25
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <DIO_Init_Pin+0x52>
     9a6:	cb 01       	movw	r24, r22
     9a8:	80 95       	com	r24
     9aa:	84 23       	and	r24, r20
     9ac:	84 bb       	out	0x14, r24	; 20
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret
     9b2:	b9 01       	movw	r22, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_Init_Pin+0x6e>
     9b6:	66 0f       	add	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	9a 95       	dec	r25
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_Init_Pin+0x6a>
     9be:	cb 01       	movw	r24, r22
     9c0:	84 2b       	or	r24, r20
     9c2:	8a bb       	out	0x1a, r24	; 26
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	08 95       	ret
     9c8:	47 b3       	in	r20, 0x17	; 23
     9ca:	21 e0       	ldi	r18, 0x01	; 1
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	61 11       	cpse	r22, r1
     9d0:	27 c0       	rjmp	.+78     	; 0xa20 <DIO_Init_Pin+0xd4>
     9d2:	b9 01       	movw	r22, r18
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_Init_Pin+0x8e>
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	9a 95       	dec	r25
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_Init_Pin+0x8a>
     9de:	cb 01       	movw	r24, r22
     9e0:	80 95       	com	r24
     9e2:	84 23       	and	r24, r20
     9e4:	87 bb       	out	0x17, r24	; 23
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	08 95       	ret
     9ea:	41 b3       	in	r20, 0x11	; 17
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	66 23       	and	r22, r22
     9f2:	09 f1       	breq	.+66     	; 0xa36 <DIO_Init_Pin+0xea>
     9f4:	b9 01       	movw	r22, r18
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_Init_Pin+0xb0>
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	9a 95       	dec	r25
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_Init_Pin+0xac>
     a00:	cb 01       	movw	r24, r22
     a02:	84 2b       	or	r24, r20
     a04:	81 bb       	out	0x11, r24	; 17
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
     a0a:	b9 01       	movw	r22, r18
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_Init_Pin+0xc6>
     a0e:	66 0f       	add	r22, r22
     a10:	77 1f       	adc	r23, r23
     a12:	9a 95       	dec	r25
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <DIO_Init_Pin+0xc2>
     a16:	cb 01       	movw	r24, r22
     a18:	84 2b       	or	r24, r20
     a1a:	84 bb       	out	0x14, r24	; 20
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret
     a20:	b9 01       	movw	r22, r18
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_Init_Pin+0xdc>
     a24:	66 0f       	add	r22, r22
     a26:	77 1f       	adc	r23, r23
     a28:	9a 95       	dec	r25
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <DIO_Init_Pin+0xd8>
     a2c:	cb 01       	movw	r24, r22
     a2e:	84 2b       	or	r24, r20
     a30:	87 bb       	out	0x17, r24	; 23
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	08 95       	ret
     a36:	b9 01       	movw	r22, r18
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_Init_Pin+0xf2>
     a3a:	66 0f       	add	r22, r22
     a3c:	77 1f       	adc	r23, r23
     a3e:	9a 95       	dec	r25
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <DIO_Init_Pin+0xee>
     a42:	cb 01       	movw	r24, r22
     a44:	80 95       	com	r24
     a46:	84 23       	and	r24, r20
     a48:	81 bb       	out	0x11, r24	; 17
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret

00000a4e <DIO_Write_Pin>:
     a4e:	80 32       	cpi	r24, 0x20	; 32
     a50:	f0 f4       	brcc	.+60     	; 0xa8e <DIO_Write_Pin+0x40>
     a52:	98 2f       	mov	r25, r24
     a54:	97 70       	andi	r25, 0x07	; 7
     a56:	86 95       	lsr	r24
     a58:	86 95       	lsr	r24
     a5a:	86 95       	lsr	r24
     a5c:	8f 5b       	subi	r24, 0xBF	; 191
     a5e:	83 34       	cpi	r24, 0x43	; 67
     a60:	c1 f0       	breq	.+48     	; 0xa92 <DIO_Write_Pin+0x44>
     a62:	84 34       	cpi	r24, 0x44	; 68
     a64:	09 f4       	brne	.+2      	; 0xa68 <DIO_Write_Pin+0x1a>
     a66:	42 c0       	rjmp	.+132    	; 0xaec <DIO_Write_Pin+0x9e>
     a68:	82 34       	cpi	r24, 0x42	; 66
     a6a:	79 f1       	breq	.+94     	; 0xaca <DIO_Write_Pin+0x7c>
     a6c:	4b b3       	in	r20, 0x1b	; 27
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	61 11       	cpse	r22, r1
     a74:	1f c0       	rjmp	.+62     	; 0xab4 <DIO_Write_Pin+0x66>
     a76:	b9 01       	movw	r22, r18
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_Write_Pin+0x30>
     a7a:	66 0f       	add	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	9a 95       	dec	r25
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_Write_Pin+0x2c>
     a82:	cb 01       	movw	r24, r22
     a84:	80 95       	com	r24
     a86:	84 23       	and	r24, r20
     a88:	8b bb       	out	0x1b, r24	; 27
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	08 95       	ret
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	08 95       	ret
     a92:	45 b3       	in	r20, 0x15	; 21
     a94:	21 e0       	ldi	r18, 0x01	; 1
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	61 11       	cpse	r22, r1
     a9a:	38 c0       	rjmp	.+112    	; 0xb0c <DIO_Write_Pin+0xbe>
     a9c:	b9 01       	movw	r22, r18
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_Write_Pin+0x56>
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	9a 95       	dec	r25
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_Write_Pin+0x52>
     aa8:	cb 01       	movw	r24, r22
     aaa:	80 95       	com	r24
     aac:	84 23       	and	r24, r20
     aae:	85 bb       	out	0x15, r24	; 21
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	08 95       	ret
     ab4:	b9 01       	movw	r22, r18
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_Write_Pin+0x6e>
     ab8:	66 0f       	add	r22, r22
     aba:	77 1f       	adc	r23, r23
     abc:	9a 95       	dec	r25
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_Write_Pin+0x6a>
     ac0:	cb 01       	movw	r24, r22
     ac2:	84 2b       	or	r24, r20
     ac4:	8b bb       	out	0x1b, r24	; 27
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	08 95       	ret
     aca:	48 b3       	in	r20, 0x18	; 24
     acc:	21 e0       	ldi	r18, 0x01	; 1
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	61 11       	cpse	r22, r1
     ad2:	27 c0       	rjmp	.+78     	; 0xb22 <DIO_Write_Pin+0xd4>
     ad4:	b9 01       	movw	r22, r18
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_Write_Pin+0x8e>
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	9a 95       	dec	r25
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_Write_Pin+0x8a>
     ae0:	cb 01       	movw	r24, r22
     ae2:	80 95       	com	r24
     ae4:	84 23       	and	r24, r20
     ae6:	88 bb       	out	0x18, r24	; 24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 95       	ret
     aec:	42 b3       	in	r20, 0x12	; 18
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	66 23       	and	r22, r22
     af4:	09 f1       	breq	.+66     	; 0xb38 <DIO_Write_Pin+0xea>
     af6:	b9 01       	movw	r22, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_Write_Pin+0xb0>
     afa:	66 0f       	add	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	9a 95       	dec	r25
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_Write_Pin+0xac>
     b02:	cb 01       	movw	r24, r22
     b04:	84 2b       	or	r24, r20
     b06:	82 bb       	out	0x12, r24	; 18
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	08 95       	ret
     b0c:	b9 01       	movw	r22, r18
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_Write_Pin+0xc6>
     b10:	66 0f       	add	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	9a 95       	dec	r25
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_Write_Pin+0xc2>
     b18:	cb 01       	movw	r24, r22
     b1a:	84 2b       	or	r24, r20
     b1c:	85 bb       	out	0x15, r24	; 21
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	08 95       	ret
     b22:	b9 01       	movw	r22, r18
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <DIO_Write_Pin+0xdc>
     b26:	66 0f       	add	r22, r22
     b28:	77 1f       	adc	r23, r23
     b2a:	9a 95       	dec	r25
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <DIO_Write_Pin+0xd8>
     b2e:	cb 01       	movw	r24, r22
     b30:	84 2b       	or	r24, r20
     b32:	88 bb       	out	0x18, r24	; 24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	08 95       	ret
     b38:	b9 01       	movw	r22, r18
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <DIO_Write_Pin+0xf2>
     b3c:	66 0f       	add	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	9a 95       	dec	r25
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <DIO_Write_Pin+0xee>
     b44:	cb 01       	movw	r24, r22
     b46:	80 95       	com	r24
     b48:	84 23       	and	r24, r20
     b4a:	82 bb       	out	0x12, r24	; 18
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 95       	ret

00000b50 <DIO_toggle_Pin>:
return DIO_ERROR_OK;
}
uinteg8_t DIO_toggle_Pin(uinteg8_t pin)
{
	uinteg8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     b50:	80 32       	cpi	r24, 0x20	; 32
     b52:	b8 f4       	brcc	.+46     	; 0xb82 <DIO_toggle_Pin+0x32>
	else
	{
		por='A'+pin/PortSize;
		pin=pin%PortSize;
     b54:	28 2f       	mov	r18, r24
     b56:	27 70       	andi	r18, 0x07	; 7
	}
	
	switch(por)
     b58:	86 95       	lsr	r24
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
     b5e:	8f 5b       	subi	r24, 0xBF	; 191
     b60:	83 34       	cpi	r24, 0x43	; 67
     b62:	89 f0       	breq	.+34     	; 0xb86 <DIO_toggle_Pin+0x36>
     b64:	84 34       	cpi	r24, 0x44	; 68
     b66:	29 f1       	breq	.+74     	; 0xbb2 <DIO_toggle_Pin+0x62>
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	c1 f0       	breq	.+48     	; 0xb9c <DIO_toggle_Pin+0x4c>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
     b6c:	3b b3       	in	r19, 0x1b	; 27
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <DIO_toggle_Pin+0x26>
     b74:	88 0f       	add	r24, r24
     b76:	2a 95       	dec	r18
     b78:	ea f7       	brpl	.-6      	; 0xb74 <DIO_toggle_Pin+0x24>
     b7a:	83 27       	eor	r24, r19
     b7c:	8b bb       	out	0x1b, r24	; 27
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     b7e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
     b80:	08 95       	ret
return DIO_ERROR_OK;
}
uinteg8_t DIO_toggle_Pin(uinteg8_t pin)
{
	uinteg8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     b82:	81 e0       	ldi	r24, 0x01	; 1
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
}
     b84:	08 95       	ret
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
     b86:	35 b3       	in	r19, 0x15	; 21
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <DIO_toggle_Pin+0x40>
     b8e:	88 0f       	add	r24, r24
     b90:	2a 95       	dec	r18
     b92:	ea f7       	brpl	.-6      	; 0xb8e <DIO_toggle_Pin+0x3e>
     b94:	83 27       	eor	r24, r19
     b96:	85 bb       	out	0x15, r24	; 21
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     b98:	80 e0       	ldi	r24, 0x00	; 0
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
     b9a:	08 95       	ret
	
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
     b9c:	38 b3       	in	r19, 0x18	; 24
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <DIO_toggle_Pin+0x56>
     ba4:	88 0f       	add	r24, r24
     ba6:	2a 95       	dec	r18
     ba8:	ea f7       	brpl	.-6      	; 0xba4 <DIO_toggle_Pin+0x54>
     baa:	83 27       	eor	r24, r19
     bac:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     bae:	80 e0       	ldi	r24, 0x00	; 0
	switch(por)
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
     bb0:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
     bb2:	32 b3       	in	r19, 0x12	; 18
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <DIO_toggle_Pin+0x6c>
     bba:	88 0f       	add	r24, r24
     bbc:	2a 95       	dec	r18
     bbe:	ea f7       	brpl	.-6      	; 0xbba <DIO_toggle_Pin+0x6a>
     bc0:	83 27       	eor	r24, r19
     bc2:	82 bb       	out	0x12, r24	; 18
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
			 break;
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
			 break;
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
			 break;
     bc6:	08 95       	ret

00000bc8 <EXT_INT_INIT>:
	vgpntrToFunc_EXT_INT0_ISR=Copy_pntrToFunc_EXT_INT0_ISR;
}
EXT_INT_ERROR_t EXT_INT1_CALL_BACK(PntrToFunc_t Copy_pntrToFunc_EXT_INT1_ISR)
{
	vgpntrToFunc_EXT_INT1_ISR=Copy_pntrToFunc_EXT_INT1_ISR;	
}
     bc8:	fc 01       	movw	r30, r24
     bca:	9f b7       	in	r25, 0x3f	; 63
     bcc:	90 68       	ori	r25, 0x80	; 128
     bce:	9f bf       	out	0x3f, r25	; 63
     bd0:	90 81       	ld	r25, Z
     bd2:	91 11       	cpse	r25, r1
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <EXT_INT_INIT+0x28>
     bd6:	81 81       	ldd	r24, Z+1	; 0x01
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	e1 f0       	breq	.+56     	; 0xc14 <EXT_INT_INIT+0x4c>
     bdc:	84 30       	cpi	r24, 0x04	; 4
     bde:	21 f4       	brne	.+8      	; 0xbe8 <EXT_INT_INIT+0x20>
     be0:	85 b7       	in	r24, 0x35	; 53
     be2:	8c 7f       	andi	r24, 0xFC	; 252
     be4:	82 60       	ori	r24, 0x02	; 2
     be6:	85 bf       	out	0x35, r24	; 53
     be8:	8b b7       	in	r24, 0x3b	; 59
     bea:	80 64       	ori	r24, 0x40	; 64
     bec:	8b bf       	out	0x3b, r24	; 59
     bee:	08 95       	ret
     bf0:	91 30       	cpi	r25, 0x01	; 1
     bf2:	19 f0       	breq	.+6      	; 0xbfa <EXT_INT_INIT+0x32>
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	a9 f0       	breq	.+42     	; 0xc22 <EXT_INT_INIT+0x5a>
     bf8:	08 95       	ret
     bfa:	81 81       	ldd	r24, Z+1	; 0x01
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	d1 f0       	breq	.+52     	; 0xc34 <EXT_INT_INIT+0x6c>
     c00:	84 30       	cpi	r24, 0x04	; 4
     c02:	21 f4       	brne	.+8      	; 0xc0c <EXT_INT_INIT+0x44>
     c04:	85 b7       	in	r24, 0x35	; 53
     c06:	83 7f       	andi	r24, 0xF3	; 243
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	85 bf       	out	0x35, r24	; 53
     c0c:	8b b7       	in	r24, 0x3b	; 59
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	8b bf       	out	0x3b, r24	; 59
     c12:	08 95       	ret
     c14:	85 b7       	in	r24, 0x35	; 53
     c16:	83 60       	ori	r24, 0x03	; 3
     c18:	85 bf       	out	0x35, r24	; 53
     c1a:	8b b7       	in	r24, 0x3b	; 59
     c1c:	80 64       	ori	r24, 0x40	; 64
     c1e:	8b bf       	out	0x3b, r24	; 59
     c20:	08 95       	ret
     c22:	81 81       	ldd	r24, Z+1	; 0x01
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	51 f0       	breq	.+20     	; 0xc3c <EXT_INT_INIT+0x74>
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	61 f0       	breq	.+24     	; 0xc44 <EXT_INT_INIT+0x7c>
     c2c:	8b b7       	in	r24, 0x3b	; 59
     c2e:	80 62       	ori	r24, 0x20	; 32
     c30:	8b bf       	out	0x3b, r24	; 59
     c32:	08 95       	ret
     c34:	85 b7       	in	r24, 0x35	; 53
     c36:	8c 60       	ori	r24, 0x0C	; 12
     c38:	85 bf       	out	0x35, r24	; 53
     c3a:	e8 cf       	rjmp	.-48     	; 0xc0c <EXT_INT_INIT+0x44>
     c3c:	84 b7       	in	r24, 0x34	; 52
     c3e:	80 64       	ori	r24, 0x40	; 64
     c40:	84 bf       	out	0x34, r24	; 52
     c42:	f4 cf       	rjmp	.-24     	; 0xc2c <EXT_INT_INIT+0x64>
     c44:	84 b7       	in	r24, 0x34	; 52
     c46:	8f 7b       	andi	r24, 0xBF	; 191
     c48:	84 bf       	out	0x34, r24	; 52
     c4a:	f0 cf       	rjmp	.-32     	; 0xc2c <EXT_INT_INIT+0x64>

00000c4c <EXT_INT2_CALL_BACK>:
EXT_INT_ERROR_t EXT_INT2_CALL_BACK(PntrToFunc_t Copy_pntrToFunc_EXT_INT2_ISR)
{
	vgpntrToFunc_EXT_INT2_ISR=Copy_pntrToFunc_EXT_INT2_ISR;
     c4c:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <vgpntrToFunc_EXT_INT2_ISR+0x1>
     c50:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <vgpntrToFunc_EXT_INT2_ISR>
}
     c54:	08 95       	ret

00000c56 <__vector_1>:
EXT_INT_ISR(INT0_VECTOR)
{
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	2f 93       	push	r18
     c62:	3f 93       	push	r19
     c64:	4f 93       	push	r20
     c66:	5f 93       	push	r21
     c68:	6f 93       	push	r22
     c6a:	7f 93       	push	r23
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	af 93       	push	r26
     c72:	bf 93       	push	r27
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
	vgpntrToFunc_EXT_INT0_ISR();
     c78:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <vgpntrToFunc_EXT_INT0_ISR>
     c7c:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <vgpntrToFunc_EXT_INT0_ISR+0x1>
     c80:	09 95       	icall
}
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <__vector_2>:
EXT_INT_ISR(INT1_VECTOR)
{
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
	vgpntrToFunc_EXT_INT1_ISR();	
     cc6:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <vgpntrToFunc_EXT_INT1_ISR>
     cca:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <vgpntrToFunc_EXT_INT1_ISR+0x1>
     cce:	09 95       	icall
}
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti

00000cf2 <__vector_3>:
EXT_INT_ISR(INT2_VECTOR)
{
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	ef 93       	push	r30
     d12:	ff 93       	push	r31
	vgpntrToFunc_EXT_INT2_ISR();
     d14:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <vgpntrToFunc_EXT_INT2_ISR>
     d18:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <vgpntrToFunc_EXT_INT2_ISR+0x1>
     d1c:	09 95       	icall
}
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <Timer_Init>:
		}
		break;
		
	}
	return TIMER_ERROR_OK;
}
     d40:	fc 01       	movw	r30, r24
     d42:	89 2b       	or	r24, r25
     d44:	81 f1       	breq	.+96     	; 0xda6 <Timer_Init+0x66>
     d46:	90 81       	ld	r25, Z
     d48:	29 2f       	mov	r18, r25
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	d9 01       	movw	r26, r18
     d4e:	af 55       	subi	r26, 0x5F	; 95
     d50:	bf 4f       	sbci	r27, 0xFF	; 255
     d52:	8c 91       	ld	r24, X
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	49 f0       	breq	.+18     	; 0xd6a <Timer_Init+0x2a>
     d58:	93 30       	cpi	r25, 0x03	; 3
     d5a:	30 f4       	brcc	.+12     	; 0xd68 <Timer_Init+0x28>
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	18 f4       	brcc	.+6      	; 0xd68 <Timer_Init+0x28>
     d62:	43 81       	ldd	r20, Z+3	; 0x03
     d64:	42 30       	cpi	r20, 0x02	; 2
     d66:	10 f0       	brcs	.+4      	; 0xd6c <Timer_Init+0x2c>
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	08 95       	ret
     d6c:	51 81       	ldd	r21, Z+1	; 0x01
     d6e:	58 30       	cpi	r21, 0x08	; 8
     d70:	d8 f7       	brcc	.-10     	; 0xd68 <Timer_Init+0x28>
     d72:	51 e0       	ldi	r21, 0x01	; 1
     d74:	5c 93       	st	X, r21
     d76:	d9 01       	movw	r26, r18
     d78:	ac 55       	subi	r26, 0x5C	; 92
     d7a:	bf 4f       	sbci	r27, 0xFF	; 255
     d7c:	8c 93       	st	X, r24
     d7e:	d9 01       	movw	r26, r18
     d80:	a9 55       	subi	r26, 0x59	; 89
     d82:	bf 4f       	sbci	r27, 0xFF	; 255
     d84:	4c 93       	st	X, r20
     d86:	91 30       	cpi	r25, 0x01	; 1
     d88:	81 f0       	breq	.+32     	; 0xdaa <Timer_Init+0x6a>
     d8a:	92 30       	cpi	r25, 0x02	; 2
     d8c:	d9 f4       	brne	.+54     	; 0xdc4 <Timer_Init+0x84>
     d8e:	85 b5       	in	r24, 0x25	; 37
     d90:	88 60       	ori	r24, 0x08	; 8
     d92:	85 bd       	out	0x25, r24	; 37
     d94:	82 81       	ldd	r24, Z+2	; 0x02
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	01 f1       	breq	.+64     	; 0xdda <Timer_Init+0x9a>
     d9a:	83 81       	ldd	r24, Z+3	; 0x03
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	19 f4       	brne	.+6      	; 0xda6 <Timer_Init+0x66>
     da0:	8f b7       	in	r24, 0x3f	; 63
     da2:	80 68       	ori	r24, 0x80	; 128
     da4:	8f bf       	out	0x3f, r24	; 63
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
     daa:	8f b5       	in	r24, 0x2f	; 47
     dac:	8f bd       	out	0x2f, r24	; 47
     dae:	8e b5       	in	r24, 0x2e	; 46
     db0:	88 60       	ori	r24, 0x08	; 8
     db2:	8e bd       	out	0x2e, r24	; 46
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	81 f7       	brne	.-32     	; 0xd9a <Timer_Init+0x5a>
     dba:	9e b5       	in	r25, 0x2e	; 46
     dbc:	81 81       	ldd	r24, Z+1	; 0x01
     dbe:	89 2b       	or	r24, r25
     dc0:	8e bd       	out	0x2e, r24	; 46
     dc2:	eb cf       	rjmp	.-42     	; 0xd9a <Timer_Init+0x5a>
     dc4:	83 b7       	in	r24, 0x33	; 51
     dc6:	88 60       	ori	r24, 0x08	; 8
     dc8:	83 bf       	out	0x33, r24	; 51
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	29 f7       	brne	.-54     	; 0xd9a <Timer_Init+0x5a>
     dd0:	93 b7       	in	r25, 0x33	; 51
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
     dd4:	89 2b       	or	r24, r25
     dd6:	83 bf       	out	0x33, r24	; 51
     dd8:	e0 cf       	rjmp	.-64     	; 0xd9a <Timer_Init+0x5a>
     dda:	95 b5       	in	r25, 0x25	; 37
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	89 2b       	or	r24, r25
     de0:	85 bd       	out	0x25, r24	; 37
     de2:	db cf       	rjmp	.-74     	; 0xd9a <Timer_Init+0x5a>

00000de4 <Timer_Start>:
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	09 f4       	brne	.+2      	; 0xdea <Timer_Start+0x6>
     de8:	44 c0       	rjmp	.+136    	; 0xe72 <Timer_Start+0x8e>
     dea:	20 f1       	brcs	.+72     	; 0xe34 <Timer_Start+0x50>
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	01 f5       	brne	.+64     	; 0xe30 <Timer_Start+0x4c>
     df0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <sgau8_TIMERMode+0x2>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	09 f4       	brne	.+2      	; 0xdfa <Timer_Start+0x16>
     df8:	af c0       	rjmp	.+350    	; 0xf58 <Timer_Start+0x174>
     dfa:	81 11       	cpse	r24, r1
     dfc:	60 c0       	rjmp	.+192    	; 0xebe <Timer_Start+0xda>
     dfe:	95 b5       	in	r25, 0x25	; 37
     e00:	92 60       	ori	r25, 0x02	; 2
     e02:	95 bd       	out	0x25, r25	; 37
     e04:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <sgau8_Interrupt_Mode+0x2>
     e08:	91 11       	cpse	r25, r1
     e0a:	b1 c0       	rjmp	.+354    	; 0xf6e <Timer_Start+0x18a>
     e0c:	61 15       	cp	r22, r1
     e0e:	71 05       	cpc	r23, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <Timer_Start+0x30>
     e12:	53 c0       	rjmp	.+166    	; 0xeba <Timer_Start+0xd6>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	30 e8       	ldi	r19, 0x80	; 128
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	38 bf       	out	0x38, r19	; 56
     e1e:	23 bd       	out	0x23, r18	; 35
     e20:	08 b6       	in	r0, 0x38	; 56
     e22:	07 fe       	sbrs	r0, 7
     e24:	fd cf       	rjmp	.-6      	; 0xe20 <Timer_Start+0x3c>
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	68 17       	cp	r22, r24
     e2a:	79 07       	cpc	r23, r25
     e2c:	b9 f7       	brne	.-18     	; 0xe1c <Timer_Start+0x38>
     e2e:	45 c0       	rjmp	.+138    	; 0xeba <Timer_Start+0xd6>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	08 95       	ret
     e34:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <sgau8_TIMERMode>
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <Timer_Start+0x5a>
     e3c:	76 c0       	rjmp	.+236    	; 0xf2a <Timer_Start+0x146>
     e3e:	81 11       	cpse	r24, r1
     e40:	39 c0       	rjmp	.+114    	; 0xeb4 <Timer_Start+0xd0>
     e42:	93 b7       	in	r25, 0x33	; 51
     e44:	92 60       	ori	r25, 0x02	; 2
     e46:	93 bf       	out	0x33, r25	; 51
     e48:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <sgau8_Interrupt_Mode>
     e4c:	91 11       	cpse	r25, r1
     e4e:	9d c0       	rjmp	.+314    	; 0xf8a <Timer_Start+0x1a6>
     e50:	61 15       	cp	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	91 f1       	breq	.+100    	; 0xeba <Timer_Start+0xd6>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	32 e0       	ldi	r19, 0x02	; 2
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	38 bf       	out	0x38, r19	; 56
     e60:	2c bf       	out	0x3c, r18	; 60
     e62:	08 b6       	in	r0, 0x38	; 56
     e64:	01 fe       	sbrs	r0, 1
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <Timer_Start+0x7e>
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	68 17       	cp	r22, r24
     e6c:	79 07       	cpc	r23, r25
     e6e:	b9 f7       	brne	.-18     	; 0xe5e <Timer_Start+0x7a>
     e70:	24 c0       	rjmp	.+72     	; 0xeba <Timer_Start+0xd6>
     e72:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <sgau8_TIMERMode+0x1>
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f4       	brne	.+2      	; 0xe7c <Timer_Start+0x98>
     e7a:	62 c0       	rjmp	.+196    	; 0xf40 <Timer_Start+0x15c>
     e7c:	81 11       	cpse	r24, r1
     e7e:	39 c0       	rjmp	.+114    	; 0xef2 <Timer_Start+0x10e>
     e80:	9e b5       	in	r25, 0x2e	; 46
     e82:	92 60       	ori	r25, 0x02	; 2
     e84:	9e bd       	out	0x2e, r25	; 46
     e86:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <sgau8_Interrupt_Mode+0x1>
     e8a:	91 11       	cpse	r25, r1
     e8c:	8c c0       	rjmp	.+280    	; 0xfa6 <Timer_Start+0x1c2>
     e8e:	61 15       	cp	r22, r1
     e90:	71 05       	cpc	r23, r1
     e92:	99 f0       	breq	.+38     	; 0xeba <Timer_Start+0xd6>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	40 e1       	ldi	r20, 0x10	; 16
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	48 bf       	out	0x38, r20	; 56
     ea0:	3b bd       	out	0x2b, r19	; 43
     ea2:	2a bd       	out	0x2a, r18	; 42
     ea4:	08 b6       	in	r0, 0x38	; 56
     ea6:	04 fe       	sbrs	r0, 4
     ea8:	fd cf       	rjmp	.-6      	; 0xea4 <Timer_Start+0xc0>
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	68 17       	cp	r22, r24
     eae:	79 07       	cpc	r23, r25
     eb0:	b1 f7       	brne	.-20     	; 0xe9e <Timer_Start+0xba>
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <Timer_Start+0xd6>
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	09 f4       	brne	.+2      	; 0xeba <Timer_Start+0xd6>
     eb8:	87 c0       	rjmp	.+270    	; 0xfc8 <Timer_Start+0x1e4>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	e1 f7       	brne	.-8      	; 0xeba <Timer_Start+0xd6>
     ec2:	85 b5       	in	r24, 0x25	; 37
     ec4:	84 60       	ori	r24, 0x04	; 4
     ec6:	85 bd       	out	0x25, r24	; 37
     ec8:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <sgau8_Interrupt_Mode+0x2>
     ecc:	81 11       	cpse	r24, r1
     ece:	a4 c0       	rjmp	.+328    	; 0x1018 <Timer_Start+0x234>
     ed0:	61 15       	cp	r22, r1
     ed2:	71 05       	cpc	r23, r1
     ed4:	91 f3       	breq	.-28     	; 0xeba <Timer_Start+0xd6>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	30 e8       	ldi	r19, 0x80	; 128
     edc:	2d e7       	ldi	r18, 0x7D	; 125
     ede:	38 bf       	out	0x38, r19	; 56
     ee0:	23 bd       	out	0x23, r18	; 35
     ee2:	08 b6       	in	r0, 0x38	; 56
     ee4:	07 fe       	sbrs	r0, 7
     ee6:	fd cf       	rjmp	.-6      	; 0xee2 <Timer_Start+0xfe>
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	68 17       	cp	r22, r24
     eec:	79 07       	cpc	r23, r25
     eee:	b9 f7       	brne	.-18     	; 0xede <Timer_Start+0xfa>
     ef0:	e4 cf       	rjmp	.-56     	; 0xeba <Timer_Start+0xd6>
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	11 f7       	brne	.-60     	; 0xeba <Timer_Start+0xd6>
     ef6:	8e b5       	in	r24, 0x2e	; 46
     ef8:	83 60       	ori	r24, 0x03	; 3
     efa:	8e bd       	out	0x2e, r24	; 46
     efc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sgau8_Interrupt_Mode+0x1>
     f00:	81 11       	cpse	r24, r1
     f02:	99 c0       	rjmp	.+306    	; 0x1036 <Timer_Start+0x252>
     f04:	61 15       	cp	r22, r1
     f06:	71 05       	cpc	r23, r1
     f08:	c1 f2       	breq	.-80     	; 0xeba <Timer_Start+0xd6>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	40 e1       	ldi	r20, 0x10	; 16
     f10:	2d e7       	ldi	r18, 0x7D	; 125
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	48 bf       	out	0x38, r20	; 56
     f16:	3b bd       	out	0x2b, r19	; 43
     f18:	2a bd       	out	0x2a, r18	; 42
     f1a:	08 b6       	in	r0, 0x38	; 56
     f1c:	04 fe       	sbrs	r0, 4
     f1e:	fd cf       	rjmp	.-6      	; 0xf1a <Timer_Start+0x136>
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	68 17       	cp	r22, r24
     f24:	79 07       	cpc	r23, r25
     f26:	b1 f7       	brne	.-20     	; 0xf14 <Timer_Start+0x130>
     f28:	c8 cf       	rjmp	.-112    	; 0xeba <Timer_Start+0xd6>
     f2a:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <sgau8_Interrupt_Mode>
     f2e:	81 11       	cpse	r24, r1
     f30:	9b c0       	rjmp	.+310    	; 0x1068 <Timer_Start+0x284>
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	88 bf       	out	0x38, r24	; 56
     f36:	6c bf       	out	0x3c, r22	; 60
     f38:	08 b6       	in	r0, 0x38	; 56
     f3a:	01 fe       	sbrs	r0, 1
     f3c:	fd cf       	rjmp	.-6      	; 0xf38 <Timer_Start+0x154>
     f3e:	bd cf       	rjmp	.-134    	; 0xeba <Timer_Start+0xd6>
     f40:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sgau8_Interrupt_Mode+0x1>
     f44:	81 11       	cpse	r24, r1
     f46:	97 c0       	rjmp	.+302    	; 0x1076 <Timer_Start+0x292>
     f48:	80 e1       	ldi	r24, 0x10	; 16
     f4a:	88 bf       	out	0x38, r24	; 56
     f4c:	7b bd       	out	0x2b, r23	; 43
     f4e:	6a bd       	out	0x2a, r22	; 42
     f50:	08 b6       	in	r0, 0x38	; 56
     f52:	01 fe       	sbrs	r0, 1
     f54:	fd cf       	rjmp	.-6      	; 0xf50 <Timer_Start+0x16c>
     f56:	b1 cf       	rjmp	.-158    	; 0xeba <Timer_Start+0xd6>
     f58:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <sgau8_Interrupt_Mode+0x2>
     f5c:	81 11       	cpse	r24, r1
     f5e:	7d c0       	rjmp	.+250    	; 0x105a <Timer_Start+0x276>
     f60:	80 e8       	ldi	r24, 0x80	; 128
     f62:	88 bf       	out	0x38, r24	; 56
     f64:	63 bd       	out	0x23, r22	; 35
     f66:	08 b6       	in	r0, 0x38	; 56
     f68:	07 fe       	sbrs	r0, 7
     f6a:	fd cf       	rjmp	.-6      	; 0xf66 <Timer_Start+0x182>
     f6c:	a6 cf       	rjmp	.-180    	; 0xeba <Timer_Start+0xd6>
     f6e:	91 30       	cpi	r25, 0x01	; 1
     f70:	09 f0       	breq	.+2      	; 0xf74 <Timer_Start+0x190>
     f72:	a3 cf       	rjmp	.-186    	; 0xeba <Timer_Start+0xd6>
     f74:	20 e8       	ldi	r18, 0x80	; 128
     f76:	28 bf       	out	0x38, r18	; 56
     f78:	93 bd       	out	0x23, r25	; 35
     f7a:	99 b7       	in	r25, 0x39	; 57
     f7c:	90 68       	ori	r25, 0x80	; 128
     f7e:	99 bf       	out	0x39, r25	; 57
     f80:	50 93 9c 00 	sts	0x009C, r21	; 0x80009c <sgpfun_TIMER2_CMP_ISR_Function+0x1>
     f84:	40 93 9b 00 	sts	0x009B, r20	; 0x80009b <sgpfun_TIMER2_CMP_ISR_Function>
     f88:	08 95       	ret
     f8a:	91 30       	cpi	r25, 0x01	; 1
     f8c:	09 f0       	breq	.+2      	; 0xf90 <Timer_Start+0x1ac>
     f8e:	95 cf       	rjmp	.-214    	; 0xeba <Timer_Start+0xd6>
     f90:	22 e0       	ldi	r18, 0x02	; 2
     f92:	28 bf       	out	0x38, r18	; 56
     f94:	9c bf       	out	0x3c, r25	; 60
     f96:	99 b7       	in	r25, 0x39	; 57
     f98:	92 60       	ori	r25, 0x02	; 2
     f9a:	99 bf       	out	0x39, r25	; 57
     f9c:	50 93 a0 00 	sts	0x00A0, r21	; 0x8000a0 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     fa0:	40 93 9f 00 	sts	0x009F, r20	; 0x80009f <sgpfun_TIMER0_CMP_ISR_Function>
     fa4:	08 95       	ret
     fa6:	91 30       	cpi	r25, 0x01	; 1
     fa8:	09 f0       	breq	.+2      	; 0xfac <Timer_Start+0x1c8>
     faa:	87 cf       	rjmp	.-242    	; 0xeba <Timer_Start+0xd6>
     fac:	90 e1       	ldi	r25, 0x10	; 16
     fae:	98 bf       	out	0x38, r25	; 56
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3b bd       	out	0x2b, r19	; 43
     fb6:	2a bd       	out	0x2a, r18	; 42
     fb8:	99 b7       	in	r25, 0x39	; 57
     fba:	90 61       	ori	r25, 0x10	; 16
     fbc:	99 bf       	out	0x39, r25	; 57
     fbe:	50 93 9e 00 	sts	0x009E, r21	; 0x80009e <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
     fc2:	40 93 9d 00 	sts	0x009D, r20	; 0x80009d <sgpfun_TIMER1_CMPA_ISR_Function>
     fc6:	08 95       	ret
     fc8:	93 b7       	in	r25, 0x33	; 51
     fca:	93 60       	ori	r25, 0x03	; 3
     fcc:	93 bf       	out	0x33, r25	; 51
     fce:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <sgau8_Interrupt_Mode>
     fd2:	91 11       	cpse	r25, r1
     fd4:	12 c0       	rjmp	.+36     	; 0xffa <Timer_Start+0x216>
     fd6:	61 15       	cp	r22, r1
     fd8:	71 05       	cpc	r23, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <Timer_Start+0x1fa>
     fdc:	6e cf       	rjmp	.-292    	; 0xeba <Timer_Start+0xd6>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	32 e0       	ldi	r19, 0x02	; 2
     fe4:	2d e7       	ldi	r18, 0x7D	; 125
     fe6:	38 bf       	out	0x38, r19	; 56
     fe8:	2c bf       	out	0x3c, r18	; 60
     fea:	08 b6       	in	r0, 0x38	; 56
     fec:	01 fe       	sbrs	r0, 1
     fee:	fd cf       	rjmp	.-6      	; 0xfea <Timer_Start+0x206>
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	68 17       	cp	r22, r24
     ff4:	79 07       	cpc	r23, r25
     ff6:	b9 f7       	brne	.-18     	; 0xfe6 <Timer_Start+0x202>
     ff8:	60 cf       	rjmp	.-320    	; 0xeba <Timer_Start+0xd6>
     ffa:	91 30       	cpi	r25, 0x01	; 1
     ffc:	09 f0       	breq	.+2      	; 0x1000 <Timer_Start+0x21c>
     ffe:	5d cf       	rjmp	.-326    	; 0xeba <Timer_Start+0xd6>
    1000:	88 bf       	out	0x38, r24	; 56
    1002:	8d e7       	ldi	r24, 0x7D	; 125
    1004:	8c bf       	out	0x3c, r24	; 60
    1006:	89 b7       	in	r24, 0x39	; 57
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	89 bf       	out	0x39, r24	; 57
    100c:	50 93 a0 00 	sts	0x00A0, r21	; 0x8000a0 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
    1010:	40 93 9f 00 	sts	0x009F, r20	; 0x80009f <sgpfun_TIMER0_CMP_ISR_Function>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	08 95       	ret
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	09 f0       	breq	.+2      	; 0x101e <Timer_Start+0x23a>
    101c:	4e cf       	rjmp	.-356    	; 0xeba <Timer_Start+0xd6>
    101e:	80 e8       	ldi	r24, 0x80	; 128
    1020:	88 bf       	out	0x38, r24	; 56
    1022:	8d e7       	ldi	r24, 0x7D	; 125
    1024:	83 bd       	out	0x23, r24	; 35
    1026:	89 b7       	in	r24, 0x39	; 57
    1028:	80 68       	ori	r24, 0x80	; 128
    102a:	89 bf       	out	0x39, r24	; 57
    102c:	50 93 9c 00 	sts	0x009C, r21	; 0x80009c <sgpfun_TIMER2_CMP_ISR_Function+0x1>
    1030:	40 93 9b 00 	sts	0x009B, r20	; 0x80009b <sgpfun_TIMER2_CMP_ISR_Function>
    1034:	42 cf       	rjmp	.-380    	; 0xeba <Timer_Start+0xd6>
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	09 f0       	breq	.+2      	; 0x103c <Timer_Start+0x258>
    103a:	3f cf       	rjmp	.-386    	; 0xeba <Timer_Start+0xd6>
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	88 bf       	out	0x38, r24	; 56
    1040:	8d e7       	ldi	r24, 0x7D	; 125
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	9b bd       	out	0x2b, r25	; 43
    1046:	8a bd       	out	0x2a, r24	; 42
    1048:	89 b7       	in	r24, 0x39	; 57
    104a:	80 61       	ori	r24, 0x10	; 16
    104c:	89 bf       	out	0x39, r24	; 57
    104e:	50 93 9e 00 	sts	0x009E, r21	; 0x80009e <sgpfun_TIMER1_CMPA_ISR_Function+0x1>
    1052:	40 93 9d 00 	sts	0x009D, r20	; 0x80009d <sgpfun_TIMER1_CMPA_ISR_Function>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	09 f0       	breq	.+2      	; 0x1060 <Timer_Start+0x27c>
    105e:	2d cf       	rjmp	.-422    	; 0xeba <Timer_Start+0xd6>
    1060:	80 e8       	ldi	r24, 0x80	; 128
    1062:	88 bf       	out	0x38, r24	; 56
    1064:	63 bd       	out	0x23, r22	; 35
    1066:	df cf       	rjmp	.-66     	; 0x1026 <Timer_Start+0x242>
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	09 f0       	breq	.+2      	; 0x106e <Timer_Start+0x28a>
    106c:	26 cf       	rjmp	.-436    	; 0xeba <Timer_Start+0xd6>
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	88 bf       	out	0x38, r24	; 56
    1072:	6c bf       	out	0x3c, r22	; 60
    1074:	c8 cf       	rjmp	.-112    	; 0x1006 <Timer_Start+0x222>
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	09 f0       	breq	.+2      	; 0x107c <Timer_Start+0x298>
    107a:	1f cf       	rjmp	.-450    	; 0xeba <Timer_Start+0xd6>
    107c:	80 e1       	ldi	r24, 0x10	; 16
    107e:	88 bf       	out	0x38, r24	; 56
    1080:	7b bd       	out	0x2b, r23	; 43
    1082:	6a bd       	out	0x2a, r22	; 42
    1084:	e1 cf       	rjmp	.-62     	; 0x1048 <Timer_Start+0x264>

00001086 <Timer_Get_tickCount>:
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	10 f4       	brcc	.+4      	; 0x108e <Timer_Get_tickCount+0x8>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	08 95       	ret
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret

00001092 <Timer_Reset>:

uinteg8_t Timer_Reset(uinteg8_t u8_Copy_TIMER_Start_TIMERChannel)
{
	switch(u8_Copy_TIMER_Start_TIMERChannel)
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	59 f0       	breq	.+22     	; 0x10ac <Timer_Reset+0x1a>
    1096:	38 f0       	brcs	.+14     	; 0x10a6 <Timer_Reset+0x14>
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	19 f4       	brne	.+6      	; 0x10a2 <Timer_Reset+0x10>
			CLR_PORT(TIMER1_COUNTER_REG);
		}
		break;
		case TIMER2:
		{
			CLR_PORT(TIMER2_COUNTER_REG);
    109c:	14 bc       	out	0x24, r1	; 36
			return TIMER_ERROR_NOK;
		}
		break;
	}
	
	return TIMER_ERROR_OK;
    109e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case TIMER2:
		{
			CLR_PORT(TIMER2_COUNTER_REG);
		}
		break;
    10a0:	08 95       	ret
		default:
		{
			return TIMER_ERROR_NOK;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	}
	
	return TIMER_ERROR_OK;
}
    10a4:	08 95       	ret
{
	switch(u8_Copy_TIMER_Start_TIMERChannel)
	{
		case TIMER0:
		{
			CLR_PORT(TIMER0_COUNTER_REG);
    10a6:	12 be       	out	0x32, r1	; 50
			return TIMER_ERROR_NOK;
		}
		break;
	}
	
	return TIMER_ERROR_OK;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
	{
		case TIMER0:
		{
			CLR_PORT(TIMER0_COUNTER_REG);
		}
		break;
    10aa:	08 95       	ret
		case TIMER1:
		{
			CLR_PORT(TIMER1_COUNTER_REG);
    10ac:	1d bc       	out	0x2d, r1	; 45
    10ae:	1c bc       	out	0x2c, r1	; 44
			return TIMER_ERROR_NOK;
		}
		break;
	}
	
	return TIMER_ERROR_OK;
    10b0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case TIMER1:
		{
			CLR_PORT(TIMER1_COUNTER_REG);
		}
		break;
    10b2:	08 95       	ret

000010b4 <__divsf3>:
    10b4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__divsf3x>
    10b8:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_round>
    10bc:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_pscB>
    10c0:	58 f0       	brcs	.+22     	; 0x10d8 <__divsf3+0x24>
    10c2:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_pscA>
    10c6:	40 f0       	brcs	.+16     	; 0x10d8 <__divsf3+0x24>
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <__divsf3+0x20>
    10ca:	5f 3f       	cpi	r21, 0xFF	; 255
    10cc:	29 f0       	breq	.+10     	; 0x10d8 <__divsf3+0x24>
    10ce:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_inf>
    10d2:	51 11       	cpse	r21, r1
    10d4:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_szero>
    10d8:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__fp_nan>

000010dc <__divsf3x>:
    10dc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fp_split3>
    10e0:	68 f3       	brcs	.-38     	; 0x10bc <__divsf3+0x8>

000010e2 <__divsf3_pse>:
    10e2:	99 23       	and	r25, r25
    10e4:	b1 f3       	breq	.-20     	; 0x10d2 <__divsf3+0x1e>
    10e6:	55 23       	and	r21, r21
    10e8:	91 f3       	breq	.-28     	; 0x10ce <__divsf3+0x1a>
    10ea:	95 1b       	sub	r25, r21
    10ec:	55 0b       	sbc	r21, r21
    10ee:	bb 27       	eor	r27, r27
    10f0:	aa 27       	eor	r26, r26
    10f2:	62 17       	cp	r22, r18
    10f4:	73 07       	cpc	r23, r19
    10f6:	84 07       	cpc	r24, r20
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <__divsf3_pse+0x26>
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	44 1f       	adc	r20, r20
    1104:	aa 1f       	adc	r26, r26
    1106:	a9 f3       	breq	.-22     	; 0x10f2 <__divsf3_pse+0x10>
    1108:	35 d0       	rcall	.+106    	; 0x1174 <__divsf3_pse+0x92>
    110a:	0e 2e       	mov	r0, r30
    110c:	3a f0       	brmi	.+14     	; 0x111c <__divsf3_pse+0x3a>
    110e:	e0 e8       	ldi	r30, 0x80	; 128
    1110:	32 d0       	rcall	.+100    	; 0x1176 <__divsf3_pse+0x94>
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	e6 95       	lsr	r30
    1118:	00 1c       	adc	r0, r0
    111a:	ca f7       	brpl	.-14     	; 0x110e <__divsf3_pse+0x2c>
    111c:	2b d0       	rcall	.+86     	; 0x1174 <__divsf3_pse+0x92>
    111e:	fe 2f       	mov	r31, r30
    1120:	29 d0       	rcall	.+82     	; 0x1174 <__divsf3_pse+0x92>
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	bb 1f       	adc	r27, r27
    112a:	26 17       	cp	r18, r22
    112c:	37 07       	cpc	r19, r23
    112e:	48 07       	cpc	r20, r24
    1130:	ab 07       	cpc	r26, r27
    1132:	b0 e8       	ldi	r27, 0x80	; 128
    1134:	09 f0       	breq	.+2      	; 0x1138 <__divsf3_pse+0x56>
    1136:	bb 0b       	sbc	r27, r27
    1138:	80 2d       	mov	r24, r0
    113a:	bf 01       	movw	r22, r30
    113c:	ff 27       	eor	r31, r31
    113e:	93 58       	subi	r25, 0x83	; 131
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	3a f0       	brmi	.+14     	; 0x1152 <__divsf3_pse+0x70>
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	51 05       	cpc	r21, r1
    1148:	78 f0       	brcs	.+30     	; 0x1168 <__divsf3_pse+0x86>
    114a:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_inf>
    114e:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_szero>
    1152:	5f 3f       	cpi	r21, 0xFF	; 255
    1154:	e4 f3       	brlt	.-8      	; 0x114e <__divsf3_pse+0x6c>
    1156:	98 3e       	cpi	r25, 0xE8	; 232
    1158:	d4 f3       	brlt	.-12     	; 0x114e <__divsf3_pse+0x6c>
    115a:	86 95       	lsr	r24
    115c:	77 95       	ror	r23
    115e:	67 95       	ror	r22
    1160:	b7 95       	ror	r27
    1162:	f7 95       	ror	r31
    1164:	9f 5f       	subi	r25, 0xFF	; 255
    1166:	c9 f7       	brne	.-14     	; 0x115a <__divsf3_pse+0x78>
    1168:	88 0f       	add	r24, r24
    116a:	91 1d       	adc	r25, r1
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	97 f9       	bld	r25, 7
    1172:	08 95       	ret
    1174:	e1 e0       	ldi	r30, 0x01	; 1
    1176:	66 0f       	add	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	88 1f       	adc	r24, r24
    117c:	bb 1f       	adc	r27, r27
    117e:	62 17       	cp	r22, r18
    1180:	73 07       	cpc	r23, r19
    1182:	84 07       	cpc	r24, r20
    1184:	ba 07       	cpc	r27, r26
    1186:	20 f0       	brcs	.+8      	; 0x1190 <__divsf3_pse+0xae>
    1188:	62 1b       	sub	r22, r18
    118a:	73 0b       	sbc	r23, r19
    118c:	84 0b       	sbc	r24, r20
    118e:	ba 0b       	sbc	r27, r26
    1190:	ee 1f       	adc	r30, r30
    1192:	88 f7       	brcc	.-30     	; 0x1176 <__divsf3_pse+0x94>
    1194:	e0 95       	com	r30
    1196:	08 95       	ret

00001198 <__fixunssfsi>:
    1198:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_splitA>
    119c:	88 f0       	brcs	.+34     	; 0x11c0 <__fixunssfsi+0x28>
    119e:	9f 57       	subi	r25, 0x7F	; 127
    11a0:	98 f0       	brcs	.+38     	; 0x11c8 <__fixunssfsi+0x30>
    11a2:	b9 2f       	mov	r27, r25
    11a4:	99 27       	eor	r25, r25
    11a6:	b7 51       	subi	r27, 0x17	; 23
    11a8:	b0 f0       	brcs	.+44     	; 0x11d6 <__fixunssfsi+0x3e>
    11aa:	e1 f0       	breq	.+56     	; 0x11e4 <__fixunssfsi+0x4c>
    11ac:	66 0f       	add	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	1a f0       	brmi	.+6      	; 0x11bc <__fixunssfsi+0x24>
    11b6:	ba 95       	dec	r27
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <__fixunssfsi+0x14>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <__fixunssfsi+0x4c>
    11bc:	b1 30       	cpi	r27, 0x01	; 1
    11be:	91 f0       	breq	.+36     	; 0x11e4 <__fixunssfsi+0x4c>
    11c0:	0e 94 82 09 	call	0x1304	; 0x1304 <__fp_zero>
    11c4:	b1 e0       	ldi	r27, 0x01	; 1
    11c6:	08 95       	ret
    11c8:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__fp_zero>
    11cc:	67 2f       	mov	r22, r23
    11ce:	78 2f       	mov	r23, r24
    11d0:	88 27       	eor	r24, r24
    11d2:	b8 5f       	subi	r27, 0xF8	; 248
    11d4:	39 f0       	breq	.+14     	; 0x11e4 <__fixunssfsi+0x4c>
    11d6:	b9 3f       	cpi	r27, 0xF9	; 249
    11d8:	cc f3       	brlt	.-14     	; 0x11cc <__fixunssfsi+0x34>
    11da:	86 95       	lsr	r24
    11dc:	77 95       	ror	r23
    11de:	67 95       	ror	r22
    11e0:	b3 95       	inc	r27
    11e2:	d9 f7       	brne	.-10     	; 0x11da <__fixunssfsi+0x42>
    11e4:	3e f4       	brtc	.+14     	; 0x11f4 <__fixunssfsi+0x5c>
    11e6:	90 95       	com	r25
    11e8:	80 95       	com	r24
    11ea:	70 95       	com	r23
    11ec:	61 95       	neg	r22
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	08 95       	ret

000011f6 <__floatunsisf>:
    11f6:	e8 94       	clt
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <__floatsisf+0x12>

000011fa <__floatsisf>:
    11fa:	97 fb       	bst	r25, 7
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__floatsisf+0x12>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	99 23       	and	r25, r25
    120e:	a9 f0       	breq	.+42     	; 0x123a <__floatsisf+0x40>
    1210:	f9 2f       	mov	r31, r25
    1212:	96 e9       	ldi	r25, 0x96	; 150
    1214:	bb 27       	eor	r27, r27
    1216:	93 95       	inc	r25
    1218:	f6 95       	lsr	r31
    121a:	87 95       	ror	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	b7 95       	ror	r27
    1222:	f1 11       	cpse	r31, r1
    1224:	f8 cf       	rjmp	.-16     	; 0x1216 <__floatsisf+0x1c>
    1226:	fa f4       	brpl	.+62     	; 0x1266 <__floatsisf+0x6c>
    1228:	bb 0f       	add	r27, r27
    122a:	11 f4       	brne	.+4      	; 0x1230 <__floatsisf+0x36>
    122c:	60 ff       	sbrs	r22, 0
    122e:	1b c0       	rjmp	.+54     	; 0x1266 <__floatsisf+0x6c>
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <__floatsisf+0x6c>
    123a:	88 23       	and	r24, r24
    123c:	11 f0       	breq	.+4      	; 0x1242 <__floatsisf+0x48>
    123e:	96 e9       	ldi	r25, 0x96	; 150
    1240:	11 c0       	rjmp	.+34     	; 0x1264 <__floatsisf+0x6a>
    1242:	77 23       	and	r23, r23
    1244:	21 f0       	breq	.+8      	; 0x124e <__floatsisf+0x54>
    1246:	9e e8       	ldi	r25, 0x8E	; 142
    1248:	87 2f       	mov	r24, r23
    124a:	76 2f       	mov	r23, r22
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <__floatsisf+0x5e>
    124e:	66 23       	and	r22, r22
    1250:	71 f0       	breq	.+28     	; 0x126e <__floatsisf+0x74>
    1252:	96 e8       	ldi	r25, 0x86	; 134
    1254:	86 2f       	mov	r24, r22
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	2a f0       	brmi	.+10     	; 0x1266 <__floatsisf+0x6c>
    125c:	9a 95       	dec	r25
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	da f7       	brpl	.-10     	; 0x125c <__floatsisf+0x62>
    1266:	88 0f       	add	r24, r24
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__fp_inf>:
    1270:	97 f9       	bld	r25, 7
    1272:	9f 67       	ori	r25, 0x7F	; 127
    1274:	80 e8       	ldi	r24, 0x80	; 128
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	08 95       	ret

0000127c <__fp_nan>:
    127c:	9f ef       	ldi	r25, 0xFF	; 255
    127e:	80 ec       	ldi	r24, 0xC0	; 192
    1280:	08 95       	ret

00001282 <__fp_pscA>:
    1282:	00 24       	eor	r0, r0
    1284:	0a 94       	dec	r0
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	09 06       	cpc	r0, r25
    128e:	08 95       	ret

00001290 <__fp_pscB>:
    1290:	00 24       	eor	r0, r0
    1292:	0a 94       	dec	r0
    1294:	12 16       	cp	r1, r18
    1296:	13 06       	cpc	r1, r19
    1298:	14 06       	cpc	r1, r20
    129a:	05 06       	cpc	r0, r21
    129c:	08 95       	ret

0000129e <__fp_round>:
    129e:	09 2e       	mov	r0, r25
    12a0:	03 94       	inc	r0
    12a2:	00 0c       	add	r0, r0
    12a4:	11 f4       	brne	.+4      	; 0x12aa <__fp_round+0xc>
    12a6:	88 23       	and	r24, r24
    12a8:	52 f0       	brmi	.+20     	; 0x12be <__fp_round+0x20>
    12aa:	bb 0f       	add	r27, r27
    12ac:	40 f4       	brcc	.+16     	; 0x12be <__fp_round+0x20>
    12ae:	bf 2b       	or	r27, r31
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <__fp_round+0x18>
    12b2:	60 ff       	sbrs	r22, 0
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <__fp_round+0x20>
    12b6:	6f 5f       	subi	r22, 0xFF	; 255
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	8f 4f       	sbci	r24, 0xFF	; 255
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	08 95       	ret

000012c0 <__fp_split3>:
    12c0:	57 fd       	sbrc	r21, 7
    12c2:	90 58       	subi	r25, 0x80	; 128
    12c4:	44 0f       	add	r20, r20
    12c6:	55 1f       	adc	r21, r21
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <__fp_splitA+0x10>
    12ca:	5f 3f       	cpi	r21, 0xFF	; 255
    12cc:	71 f0       	breq	.+28     	; 0x12ea <__fp_splitA+0x1a>
    12ce:	47 95       	ror	r20

000012d0 <__fp_splitA>:
    12d0:	88 0f       	add	r24, r24
    12d2:	97 fb       	bst	r25, 7
    12d4:	99 1f       	adc	r25, r25
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <__fp_splitA+0x20>
    12d8:	9f 3f       	cpi	r25, 0xFF	; 255
    12da:	79 f0       	breq	.+30     	; 0x12fa <__fp_splitA+0x2a>
    12dc:	87 95       	ror	r24
    12de:	08 95       	ret
    12e0:	12 16       	cp	r1, r18
    12e2:	13 06       	cpc	r1, r19
    12e4:	14 06       	cpc	r1, r20
    12e6:	55 1f       	adc	r21, r21
    12e8:	f2 cf       	rjmp	.-28     	; 0x12ce <__fp_split3+0xe>
    12ea:	46 95       	lsr	r20
    12ec:	f1 df       	rcall	.-30     	; 0x12d0 <__fp_splitA>
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <__fp_splitA+0x30>
    12f0:	16 16       	cp	r1, r22
    12f2:	17 06       	cpc	r1, r23
    12f4:	18 06       	cpc	r1, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	f1 cf       	rjmp	.-30     	; 0x12dc <__fp_splitA+0xc>
    12fa:	86 95       	lsr	r24
    12fc:	71 05       	cpc	r23, r1
    12fe:	61 05       	cpc	r22, r1
    1300:	08 94       	sec
    1302:	08 95       	ret

00001304 <__fp_zero>:
    1304:	e8 94       	clt

00001306 <__fp_szero>:
    1306:	bb 27       	eor	r27, r27
    1308:	66 27       	eor	r22, r22
    130a:	77 27       	eor	r23, r23
    130c:	cb 01       	movw	r24, r22
    130e:	97 f9       	bld	r25, 7
    1310:	08 95       	ret

00001312 <__mulsf3>:
    1312:	0e 94 9c 09 	call	0x1338	; 0x1338 <__mulsf3x>
    1316:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_round>
    131a:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_pscA>
    131e:	38 f0       	brcs	.+14     	; 0x132e <__mulsf3+0x1c>
    1320:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_pscB>
    1324:	20 f0       	brcs	.+8      	; 0x132e <__mulsf3+0x1c>
    1326:	95 23       	and	r25, r21
    1328:	11 f0       	breq	.+4      	; 0x132e <__mulsf3+0x1c>
    132a:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_inf>
    132e:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__fp_nan>
    1332:	11 24       	eor	r1, r1
    1334:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_szero>

00001338 <__mulsf3x>:
    1338:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fp_split3>
    133c:	70 f3       	brcs	.-36     	; 0x131a <__mulsf3+0x8>

0000133e <__mulsf3_pse>:
    133e:	95 9f       	mul	r25, r21
    1340:	c1 f3       	breq	.-16     	; 0x1332 <__mulsf3+0x20>
    1342:	95 0f       	add	r25, r21
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	55 1f       	adc	r21, r21
    1348:	62 9f       	mul	r22, r18
    134a:	f0 01       	movw	r30, r0
    134c:	72 9f       	mul	r23, r18
    134e:	bb 27       	eor	r27, r27
    1350:	f0 0d       	add	r31, r0
    1352:	b1 1d       	adc	r27, r1
    1354:	63 9f       	mul	r22, r19
    1356:	aa 27       	eor	r26, r26
    1358:	f0 0d       	add	r31, r0
    135a:	b1 1d       	adc	r27, r1
    135c:	aa 1f       	adc	r26, r26
    135e:	64 9f       	mul	r22, r20
    1360:	66 27       	eor	r22, r22
    1362:	b0 0d       	add	r27, r0
    1364:	a1 1d       	adc	r26, r1
    1366:	66 1f       	adc	r22, r22
    1368:	82 9f       	mul	r24, r18
    136a:	22 27       	eor	r18, r18
    136c:	b0 0d       	add	r27, r0
    136e:	a1 1d       	adc	r26, r1
    1370:	62 1f       	adc	r22, r18
    1372:	73 9f       	mul	r23, r19
    1374:	b0 0d       	add	r27, r0
    1376:	a1 1d       	adc	r26, r1
    1378:	62 1f       	adc	r22, r18
    137a:	83 9f       	mul	r24, r19
    137c:	a0 0d       	add	r26, r0
    137e:	61 1d       	adc	r22, r1
    1380:	22 1f       	adc	r18, r18
    1382:	74 9f       	mul	r23, r20
    1384:	33 27       	eor	r19, r19
    1386:	a0 0d       	add	r26, r0
    1388:	61 1d       	adc	r22, r1
    138a:	23 1f       	adc	r18, r19
    138c:	84 9f       	mul	r24, r20
    138e:	60 0d       	add	r22, r0
    1390:	21 1d       	adc	r18, r1
    1392:	82 2f       	mov	r24, r18
    1394:	76 2f       	mov	r23, r22
    1396:	6a 2f       	mov	r22, r26
    1398:	11 24       	eor	r1, r1
    139a:	9f 57       	subi	r25, 0x7F	; 127
    139c:	50 40       	sbci	r21, 0x00	; 0
    139e:	9a f0       	brmi	.+38     	; 0x13c6 <__mulsf3_pse+0x88>
    13a0:	f1 f0       	breq	.+60     	; 0x13de <__mulsf3_pse+0xa0>
    13a2:	88 23       	and	r24, r24
    13a4:	4a f0       	brmi	.+18     	; 0x13b8 <__mulsf3_pse+0x7a>
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	bb 1f       	adc	r27, r27
    13ac:	66 1f       	adc	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	91 50       	subi	r25, 0x01	; 1
    13b4:	50 40       	sbci	r21, 0x00	; 0
    13b6:	a9 f7       	brne	.-22     	; 0x13a2 <__mulsf3_pse+0x64>
    13b8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ba:	51 05       	cpc	r21, r1
    13bc:	80 f0       	brcs	.+32     	; 0x13de <__mulsf3_pse+0xa0>
    13be:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_inf>
    13c2:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_szero>
    13c6:	5f 3f       	cpi	r21, 0xFF	; 255
    13c8:	e4 f3       	brlt	.-8      	; 0x13c2 <__mulsf3_pse+0x84>
    13ca:	98 3e       	cpi	r25, 0xE8	; 232
    13cc:	d4 f3       	brlt	.-12     	; 0x13c2 <__mulsf3_pse+0x84>
    13ce:	86 95       	lsr	r24
    13d0:	77 95       	ror	r23
    13d2:	67 95       	ror	r22
    13d4:	b7 95       	ror	r27
    13d6:	f7 95       	ror	r31
    13d8:	e7 95       	ror	r30
    13da:	9f 5f       	subi	r25, 0xFF	; 255
    13dc:	c1 f7       	brne	.-16     	; 0x13ce <__mulsf3_pse+0x90>
    13de:	fe 2b       	or	r31, r30
    13e0:	88 0f       	add	r24, r24
    13e2:	91 1d       	adc	r25, r1
    13e4:	96 95       	lsr	r25
    13e6:	87 95       	ror	r24
    13e8:	97 f9       	bld	r25, 7
    13ea:	08 95       	ret

000013ec <_exit>:
    13ec:	f8 94       	cli

000013ee <__stop_program>:
    13ee:	ff cf       	rjmp	.-2      	; 0x13ee <__stop_program>
